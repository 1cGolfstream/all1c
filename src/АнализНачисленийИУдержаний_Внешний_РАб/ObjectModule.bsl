#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем ВсегоУдерж;
перем ВсегоНач;
	
Функция СведенияОВнешнейОбработке() Экспорт

	МассивНазначений = Новый Массив;
	МассивНазначений.Добавить("Документ.НачислениеЗарплаты");
		
	Параметры = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	Параметры.Вид		      = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиОтчет();
	Параметры.Наименование    = "Расчетный листок по документу";
	Параметры.Версия          = "2.1";
	Параметры.БезопасныйРежим = Ложь;
	Параметры.Информация      = "Расчтеный листок по документу из которого он формируется с отбором по сот. выделенному в ТЧ Начисления
								|26.04.2016 /1.1/ - Добавлен вывод блока по отгрузкам только при условии наличия начисления из группы ""Премии""
								|15.05.2017 /2.1/ - Добавлена команда по формированию отчета по всем сотр. в документе";

	Команда = Параметры.Команды.Добавить();
	Команда.Представление = "Расчетный листок по документу (по одному человеку)";
	Команда.Идентификатор = "РасчетныйЛисток_Один";   
	Команда.Использование = "ВызовКлиентскогоМетода"; 
	Команда.Модификатор   = "ПечатьMXL";

	Команда = Параметры.Команды.Добавить();
	Команда.Представление = "Расчетный листок по документу (по всем)";
	Команда.Идентификатор = "РасчетныйЛисток_Все";   
	Команда.Использование = "ВызовКлиентскогоМетода"; 
	Команда.Модификатор   = "ПечатьMXL";

	Возврат Параметры;

КонецФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды,ОбъектыНазначения,ПараметрыКоманды) Экспорт
	
	СсылкаНаОбъект = ОбъектыНазначения[0];

	СтандартныйПериод = Новый СтандартныйПериод();
	СтандартныйПериод.ДатаНачала =НачалоМесяца(СсылкаНаОбъект.Дата);
	СтандартныйПериод.ДатаОкончания =КонецМесяца(СсылкаНаОбъект.Дата);
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КлючВарианта", "РасчетныйЛисток");
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Период",СтандартныйПериод);
	//Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(
	ЭтотОбъект.СкомпоноватьРезультат();
КонецПроцедуры	
	
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Для общей формы "Форма отчета" подсистемы "Варианты отчетов".
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	Настройки.СоответствиеПериодичностиПараметров.Вставить(Новый ПараметрКомпоновкиДанных("Период"), Перечисления.ДоступныеПериодыОтчета.Месяц);
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	КлючВарианта = НеОпределено;
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("КлючВарианта", КлючВарианта);
	
	Если КлючВарианта = "РасчетныйЛисток" ИЛИ КлючВарианта = "РасчетныйЛистокСРазбивкойПоИсточникамФинансирования" Тогда
				
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасчетныйЛисток";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ДокументРезультат.АвтоМасштаб = Истина;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
		
		Если КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("Период") Тогда
			НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("Период", КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Период);
		КонецЕсли; 
		
		ЗарплатаКадрыОтчеты.ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, НастройкиОтчета);
		
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
		НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ДанныеОтчета = Новый ДеревоЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		Макет = ПолучитьМакет("ПФ_MXL_РасчетныйЛисток");
		Макеты = Новый Структура("Шапка,НачисленоУдержано,ПрочиеВыплачено,СтрокаДвижений,Итог12,Итог34,Сальдо,Группировка,СтатьяФинансирования,ИтогСтатьяФинансирования,Итог12ВНатуральнойФорме,ГФ_ДопПараметры");
		
		Макеты.Шапка = Макет.ПолучитьОбласть("Шапка");
		Макеты.НачисленоУдержано = Макет.ПолучитьОбласть("НачисленоУдержано");
		Макеты.ПрочиеВыплачено = Макет.ПолучитьОбласть("ПрочиеВыплачено");
		Макеты.СтрокаДвижений = Макет.ПолучитьОбласть("СтрокаДвижений");
		Макеты.Итог12 = Макет.ПолучитьОбласть("Итог12");
		Макеты.Итог12ВНатуральнойФорме = Макет.ПолучитьОбласть("Итог12ВНатуральнойФорме");
		Макеты.Итог34 = Макет.ПолучитьОбласть("Итог34");
		Макеты.Сальдо = Макет.ПолучитьОбласть("Сальдо");
		Макеты.Группировка = Макет.ПолучитьОбласть("Группировка");
		Макеты.СтатьяФинансирования = Макет.ПолучитьОбласть("СтатьяФинансирования");
		Макеты.ИтогСтатьяФинансирования = Макет.ПолучитьОбласть("ИтогСтатьяФинансирования");
		Макеты.ГФ_ДопПараметры   =  Макет.ПолучитьОбласть("ГФ_ДопПараметры");
		
		// Нужно проверить включена ли группировка по подразделениям
		ЕстьГруппировкаПоПодразделению = Ложь;
		ПараметрГруппировки = Новый ПараметрКомпоновкиДанных("РазбиватьПоПодразделениям");
		ЕстьГруппировкаПоПодразделению = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрГруппировки).Значение;
		
		ГруппироватьПоИсточникамФинансирования = (КлючВарианта = "РасчетныйЛистокСРазбивкойПоИсточникамФинансирования");
		
		СтруктураДляПараметровЗапроса = Новый Структура;
		СтруктураДляПараметровЗапроса.Вставить("ДатаНачала",КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Период.ДатаНачала);
		СтруктураДляПараметровЗапроса.Вставить("ДатаОкончания",КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Период.ДатаОкончания);
		
		//В данном реквизите будем хранить печатные формы каждой карточки расчета
		ОбъектыПечати = Новый СписокЗначений;
		
		Для каждого СтрокаМесяца Из ДанныеОтчета.Строки Цикл
			Для Каждого СтрокаОрганизации Из СтрокаМесяца.Строки Цикл
				ВывестиОрганизациюРасчетныйЛисток(СтрокаОрганизации, ДокументРезультат, Макеты, ЕстьГруппировкаПоПодразделению, СоответствиеПользовательскихПолей, ГруппироватьПоИсточникамФинансирования
				,СтруктураДляПараметровЗапроса,ОбъектыПечати);
			КонецЦикла;
		КонецЦикла;
		
		СтандартнаяОбработка = Ложь;
		
		АдресВХ = ПоместитьВоВременноеХранилище(ОбъектыПечати,Новый УникальныйИдентификатор());
		
	Иначе
		
		УчетНачисленнойЗарплаты.ПриКомпоновкеОтчетаАнализНачисленийИУдержаний(
		ЭтотОбъект, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, КлючВарианта);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает значение Истина, если в группировках элементов структуры присутствует поле "Период регистрации"
//
Функция НайтиМесяцНачисления(Структура) Экспорт
	
	ЕстьПоле = Ложь;
	
	Если ТипЗнч(Структура) <> Тип("ГруппировкаКомпоновкиДанных")
       И ТипЗнч(Структура) <> Тип("ГруппировкаТаблицыКомпоновкиДанных")
	   И ТипЗнч(Структура) <> Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		
		Возврат ЕстьПоле;
		
	КонецЕсли;
	
	ПолеМесяцНачисления = Новый ПолеКомпоновкиДанных("МесяцНачисления");
	
	Для каждого ПолеГруппировки Из Структура.ПоляГруппировки.Элементы Цикл
		
		Если ПолеГруппировки.Использование И ПолеГруппировки.Поле = ПолеМесяцНачисления Тогда
			
			ЕстьПоле = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЕстьПоле И Структура.Структура.Количество() <> 0 Тогда
		
		ЕстьПоле = НайтиМесяцНачисления(Структура.Структура[0]);
		
	КонецЕсли;
	
	Возврат ЕстьПоле;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функции формирование отчета по макету Т-51

Процедура ВывестиОрганизациюТ51(СтрокаОрганизации, ДокументРезультат, Макеты, ЕстьГруппировкаПоПодразделению, СоответствиеПользовательскихПолей)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ЕстьОплатаВНатуральнойФорме = (СтрокаОрганизации[СоответствиеПользовательскихПолей["НачисленоВНатуральнойФорме"]] <> 0);
		
	Если ЕстьГруппировкаПоПодразделению Тогда
		Для Каждого СтрокаПодразделения Из СтрокаОрганизации.Строки Цикл
			ВывестиПодразделениеТ51(СтрокаПодразделения, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ЕстьОплатаВНатуральнойФорме);
		КонецЦикла;
	Иначе
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		КВыплатеПоВедомости = 0;
		
		Макеты.ШапкаДокумента.Параметры.Заполнить(СтрокаОрганизации);
		Макеты.ШапкаДокумента.Параметры.ДатаД = Формат(ЗарплатаКадрыКлиентСервер.ДатаСеанса(), "ДЛФ=D");
		Макеты.Шапка.Параметры.Заполнить(СтрокаОрганизации);
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ШапкаДокумента, СтрокаОрганизации, СоответствиеПользовательскихПолей);
		Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(Макеты.ШапкаДокумента.Параметры.Подразделение) Тогда
			Макеты.ШапкаДокумента.Параметры.Подразделение = Макеты.ШапкаДокумента.Параметры.Подразделение.ПолноеНаименование();
		КонецЕсли; 
		ДокументРезультат.Вывести(Макеты.ШапкаДокумента);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка, СтрокаОрганизации, СоответствиеПользовательскихПолей);
		Если ЕстьОплатаВНатуральнойФорме Тогда
			Макеты.Шапка.Параметры.ГруппаНачислений2 = "Оплата в натуральной форме";
		КонецЕсли;
		ДокументРезультат.Вывести(Макеты.Шапка);
		НомерСтроки = 0;
		ПромежуточныеИтоги = ПромежуточныеИтогиПоСтраницеТ51();
		Для Каждого СтрокаПодразделения Из СтрокаОрганизации.Строки Цикл
			Для Каждого СтрокаСотрудника Из СтрокаПодразделения.Строки Цикл
				ВывестиСотрудникаТ51(НомерСтроки, СтрокаСотрудника, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ПромежуточныеИтоги, КВыплатеПоВедомости, ЕстьОплатаВНатуральнойФорме);
			КонецЦикла;
		КонецЦикла;
		ДополнитьСтраницуТ51(НомерСтроки, Макеты, ДокументРезультат, ПромежуточныеИтоги);
		Макеты.ИтогоПоВедомости.Параметры.Заполнить(СтрокаОрганизации);
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ИтогоПоВедомости, СтрокаОрганизации, СоответствиеПользовательскихПолей);
		Макеты.Подвал.Параметры.Заполнить(СтрокаОрганизации);
		
		Макеты.ИтогоПоВедомости.Параметры.КВыплате = КВыплатеПоВедомости;
	
		Если ЕстьОплатаВНатуральнойФорме Тогда
			Макеты.ИтогоПоВедомости.Параметры.НачисленоСдельно =
				СтрокаОрганизации[СоответствиеПользовательскихПолей["НачисленоВНатуральнойФорме"]];
			Макеты.ИтогоПоВедомости.Параметры.ПрочиеДоходы =
				СтрокаОрганизации[СоответствиеПользовательскихПолей["ПрочиеДоходы"]] + СтрокаОрганизации[СоответствиеПользовательскихПолей["НачисленоСдельно"]];
		КонецЕсли;
	
		ДокументРезультат.Вывести(Макеты.ИтогоПоВедомости);
		ДокументРезультат.Вывести(Макеты.Подвал);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиПодразделениеТ51(СтрокаПодразделения, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ЕстьОплатаВНатуральнойФорме)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	КВыплатеПоВедомости = 0;
	
	Макеты.ШапкаДокумента.Параметры.Заполнить(СтрокаПодразделения);
	Макеты.ШапкаДокумента.Параметры.ДатаД = Формат(ЗарплатаКадрыКлиентСервер.ДатаСеанса(), "ДЛФ=D");
	Макеты.Шапка.Параметры.Заполнить(СтрокаПодразделения);
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ШапкаДокумента, СтрокаПодразделения, СоответствиеПользовательскихПолей);
	Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(Макеты.ШапкаДокумента.Параметры.Подразделение) Тогда
		Макеты.ШапкаДокумента.Параметры.Подразделение = Макеты.ШапкаДокумента.Параметры.Подразделение.ПолноеНаименование();
	КонецЕсли; 
	ДокументРезультат.Вывести(Макеты.ШапкаДокумента);
	ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка, СтрокаПодразделения, СоответствиеПользовательскихПолей);
	ДокументРезультат.Вывести(Макеты.Шапка);
	НомерСтроки = 0;
	ПромежуточныеИтоги = ПромежуточныеИтогиПоСтраницеТ51();
	Для Каждого СтрокаСотрудника Из СтрокаПодразделения.Строки Цикл
		ВывестиСотрудникаТ51(НомерСтроки, СтрокаСотрудника, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ПромежуточныеИтоги, КВыплатеПоВедомости, ЕстьОплатаВНатуральнойФорме);
	КонецЦикла;
	ДополнитьСтраницуТ51(НомерСтроки, Макеты, ДокументРезультат, ПромежуточныеИтоги);
	Макеты.ИтогоПоВедомости.Параметры.Заполнить(СтрокаПодразделения);
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ИтогоПоВедомости, СтрокаПодразделения, СоответствиеПользовательскихПолей);
	Макеты.Подвал.Параметры.Заполнить(СтрокаПодразделения);
	
	Макеты.ИтогоПоВедомости.Параметры.КВыплате = КВыплатеПоВедомости;
	
	ДокументРезультат.Вывести(Макеты.ИтогоПоВедомости);
	ДокументРезультат.Вывести(Макеты.Подвал);
	
КонецПроцедуры

Процедура ВывестиСотрудникаТ51(НомерСтроки, СтрокаСотрудника, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ПромежуточныеИтоги, КВыплатеПоВедомости, ЕстьОплатаВНатуральнойФорме)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	НомерСтроки = НомерСтроки + 1;
	Макеты.Строка.Параметры.Заполнить(СтрокаСотрудника);
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Строка, СтрокаСотрудника, СоответствиеПользовательскихПолей);
	
	Если НЕ НастройкиПечатныхФорм.ВыводитьПолныеФИОВСписочныхПечатныхФормах Тогда
		Макеты.Строка.Параметры.СотрудникФизическоеЛицоФИО = ФизическиеЛицаКлиентСервер.ФамилияИнициалыФизЛица(СтрокаСотрудника.СотрудникФизическоеЛицоФИО);
	КонецЕсли;
	
	ОтработаноРабочихДней = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноРабочихДней")];
	ОтработаноРабочихЧасов = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноРабочихЧасов")];
	ОтработаноПразднВыходныхДней = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноПразднВыходныхДней")];
	ОтработаноПразднВыходныхЧасов = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноПразднВыходныхЧасов")];
	
	Если ОтработаноРабочихДней <> NULL И ОтработаноРабочихДней > 0 Тогда 
		Макеты.Строка.Параметры.ОтработаноРабочихДней = "" + ОтработаноРабочихДней + " (" + ОтработаноРабочихЧасов + ")";
	Иначе
		Макеты.Строка.Параметры.ОтработаноРабочихДней = "";
	КонецЕсли;
			
	Если ОтработаноПразднВыходныхДней <> NULL И ОтработаноПразднВыходныхДней > 0 Тогда 
		Макеты.Строка.Параметры.ОтработаноПразднВыходныхДней = "" + ОтработаноПразднВыходныхДней + " (" + ОтработаноПразднВыходныхЧасов + ")";
	Иначе
		Макеты.Строка.Параметры.ОтработаноПразднВыходныхДней = "";
	КонецЕсли;
			
	Макеты.Строка.Параметры.НомерПП = НомерСтроки;
	
	МассивВыводимыхОбластей = Новый Массив;
	МассивВыводимыхОбластей.Добавить(Макеты.Строка);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоСтранице);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоВедомости);
	МассивВыводимыхОбластей.Добавить(Макеты.Подвал);
	Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, МассивВыводимыхОбластей) Тогда
		ЗаполнитьЗначенияСвойств(Макеты.ИтогоПоСтранице.Параметры, ПромежуточныеИтоги);
		ДокументРезультат.Вывести(Макеты.ИтогоПоСтранице);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка, СтрокаСотрудника, СоответствиеПользовательскихПолей);
		ДокументРезультат.Вывести(Макеты.Шапка);
		ПромежуточныеИтоги = ПромежуточныеИтогиПоСтраницеТ51();
	КонецЕсли;
	
	Если Макеты.Строка.Параметры.КВыплате < 0 Тогда
		Макеты.Строка.Параметры.КВыплате = 0;
	КонецЕсли;
	
	Если ЕстьОплатаВНатуральнойФорме Тогда
		Макеты.Строка.Параметры.НачисленоСдельно =
			СтрокаСотрудника[СоответствиеПользовательскихПолей["НачисленоВНатуральнойФорме"]];
		Макеты.Строка.Параметры.ПрочиеДоходы =
			СтрокаСотрудника[СоответствиеПользовательскихПолей["ПрочиеДоходы"]] + СтрокаСотрудника[СоответствиеПользовательскихПолей["НачисленоСдельно"]];
	КонецЕсли;
	
	ДобавитьВПромежуточныйИтог(ПромежуточныеИтоги, Макеты.Строка.Параметры);
	КВыплатеПоВедомости = КВыплатеПоВедомости + Макеты.Строка.Параметры.КВыплате;
	ДокументРезультат.Вывести(Макеты.Строка);
	
КонецПроцедуры

Процедура ДополнитьСтраницуТ51(НомерСтроки, Макеты, ДокументРезультат, ПромежуточныеИтоги)
	
	МассивВыводимыхОбластей = Новый Массив;
	МассивВыводимыхОбластей.Добавить(Макеты.ПустаяСтрока);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоСтранице);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоВедомости);
	МассивВыводимыхОбластей.Добавить(Макеты.Подвал);
	Пока ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, МассивВыводимыхОбластей) Цикл
		ДокументРезультат.Вывести(Макеты.ПустаяСтрока);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Макеты.ИтогоПоСтранице.Параметры, ПромежуточныеИтоги);
	ДокументРезультат.Вывести(Макеты.ИтогоПоСтранице);
	
КонецПроцедуры

Функция ПромежуточныеИтогиПоСтраницеТ51()
	
	ПромежуточныеИтоги = Новый Структура;
	
	ПромежуточныеИтоги.Вставить("НачисленоПовременно", 0);
	ПромежуточныеИтоги.Вставить("НачисленоСдельно", 0);
	ПромежуточныеИтоги.Вставить("ПрочиеДоходы", 0);
	ПромежуточныеИтоги.Вставить("ДругиеДоходы", 0);
	ПромежуточныеИтоги.Вставить("ВсегоНачислено", 0);
	ПромежуточныеИтоги.Вставить("НДФЛ", 0);
	ПромежуточныеИтоги.Вставить("ПрочиеУдержания", 0);
	ПромежуточныеИтоги.Вставить("ВсегоУдержано", 0);
	ПромежуточныеИтоги.Вставить("ДолгЗаОрганизацией", 0);
	ПромежуточныеИтоги.Вставить("ДолгЗаСотрудником", 0);
	ПромежуточныеИтоги.Вставить("КВыплате", 0);
	
	Возврат ПромежуточныеИтоги;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функции формирование отчета по макету Т-49

Процедура ИзменитьГруппировкиВариантаТ49(Структура, ЕстьГруппировкаПоПодразделению)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		
		Если ЭлементСтруктуры.Имя = "Подразделение" Тогда
			Если ЕстьГруппировкаПоПодразделению Тогда
				ЭлементСтруктуры.Использование = Истина;
			Иначе
				ЭлементСтруктуры.Использование = Ложь;
			КонецЕсли;
		ИначеЕсли ЭлементСтруктуры.Имя = "Сотрудник" Тогда
			Если ЕстьГруппировкаПоПодразделению Тогда
				ЭлементСтруктуры.Использование = Ложь;
			Иначе
				ЭлементСтруктуры.Использование = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ИзменитьГруппировкиВариантаТ49(ЭлементСтруктуры.Структура, ЕстьГруппировкаПоПодразделению);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиОрганизациюТ49(СтрокаОрганизации, ДокументРезультат, Макеты, ЕстьГруппировкаПоПодразделению, СоответствиеПользовательскихПолей, ПорядокДопНачислений, ПорядокДопУдержаний)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	Если ЕстьГруппировкаПоПодразделению Тогда
		Для Каждого СтрокаПодразделения Из СтрокаОрганизации.Строки Цикл
			ВывестиПодразделениеТ49(СтрокаПодразделения, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ПорядокДопНачислений, ПорядокДопУдержаний);
		КонецЦикла;
	Иначе
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		КВыплатеПоВедомости = 0;
		
		Макеты.ШапкаДокумента.Параметры.Заполнить(СтрокаОрганизации);
		Макеты.ШапкаДокумента.Параметры.ДатаД = Формат(ЗарплатаКадрыКлиентСервер.ДатаСеанса(), "ДЛФ=D");
		Макеты.Шапка.Параметры.Заполнить(СтрокаОрганизации);
		
		Документ = Неопределено;
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("Документ", Документ);
		Если Документ <> Неопределено Тогда
			
			ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Документ,
				"Номер, Дата, Руководитель, ДолжностьРуководителя, ГлавныйБухгалтер, Кассир, ДолжностьКассира, Бухгалтер");
			
		Иначе
			ДанныеДокумента = Новый Структура("Организация,Руководитель,ДолжностьРуководителя,ГлавныйБухгалтер,Кассир,ДолжностьКассира", СтрокаОрганизации.Организация);
			ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ДанныеДокумента, КонецМесяца(СтрокаОрганизации.МесяцНачисления));
			ДанныеДокумента.Удалить("Организация");
			ДанныеДокумента.Вставить("Номер", "");
			ДанныеДокумента.Вставить("Дата", "");
			ДанныеДокумента.Вставить("Бухгалтер", Справочники.ФизическиеЛица.ПустаяСсылка());
			
		КонецЕсли;
		
		СписокОтветственных = Новый Массив;
		Если ЗначениеЗаполнено(ДанныеДокумента.Руководитель) Тогда
			СписокОтветственных.Добавить(ДанныеДокумента.Руководитель);
		КонецЕсли; 
		Если ЗначениеЗаполнено(ДанныеДокумента.ГлавныйБухгалтер) Тогда
			СписокОтветственных.Добавить(ДанныеДокумента.ГлавныйБухгалтер);
		КонецЕсли; 
		Если ЗначениеЗаполнено(ДанныеДокумента.Кассир) Тогда
			СписокОтветственных.Добавить(ДанныеДокумента.Кассир);
		КонецЕсли; 
		Если ЗначениеЗаполнено(ДанныеДокумента.Бухгалтер) Тогда
			СписокОтветственных.Добавить(ДанныеДокумента.Бухгалтер);
		КонецЕсли; 
		
		РасшифровкиПодписей = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, СписокОтветственных,"ИОФамилия", КонецМесяца(СтрокаОрганизации.МесяцНачисления));
		
		Для каждого СтрокаТаблицы Из ПорядокДопНачислений Цикл
			Макеты.Шапка.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СтрокаТаблицы.Заголовок;
		КонецЦикла;
		Для каждого СтрокаТаблицы Из ПорядокДопУдержаний Цикл
			Макеты.Шапка.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СтрокаТаблицы.Заголовок;
		КонецЦикла;
		
		Макеты.ШапкаДокумента.Параметры.НомерД = ДанныеДокумента.Номер;
		Макеты.ШапкаДокумента.Параметры.ДатаД = ДанныеДокумента.Дата;
		
		Макеты.ШапкаДокумента.Параметры.ДолжностьРуководителя = ДанныеДокумента.ДолжностьРуководителя;
		ДанныеРуководителя = РасшифровкиПодписей.Найти(ДанныеДокумента.Руководитель, "ФизическоеЛицо");
		Если ДанныеРуководителя <> Неопределено Тогда
			Макеты.ШапкаДокумента.Параметры.РуководительРасшифровкаПодписи = ДанныеРуководителя.ИОФамилия;
		КонецЕсли; 
		
		ДанныеГлавногоБухгалтера = РасшифровкиПодписей.Найти(ДанныеДокумента.ГлавныйБухгалтер, "ФизическоеЛицо");
		Если ДанныеГлавногоБухгалтера <> Неопределено Тогда
			Макеты.ШапкаДокумента.Параметры.ГлавныйБухгалтерРасшифровкаПодписи = ДанныеГлавногоБухгалтера.ИОФамилия;
		КонецЕсли; 
		
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ШапкаДокумента, СтрокаОрганизации, СоответствиеПользовательскихПолей);
		
		ДанныеВедомости = Неопределено;
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ДанныеВедомости", ДанныеВедомости);
		Если ДанныеВедомости = Неопределено Тогда
			КВыплате = СтрокаОрганизации[СоответствиеПользовательскихПолей.Получить("КВыплате")];
		Иначе
			КВыплате = ДанныеВедомости.Итог("КВыплате");
			СтрокаОрганизации[СоответствиеПользовательскихПолей.Получить("КВыплате")] = КВыплате;
		КонецЕсли;
		Если КВыплате > 0 Тогда
			ВалютаУчета = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
			Макеты.ШапкаДокумента.Параметры.СуммаВсегоПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(КВыплате, ВалютаУчета);
			Макеты.ШапкаДокумента.Параметры.СуммаДокРублей = Цел(КВыплате);
			Макеты.ШапкаДокумента.Параметры.СуммаДокКопеек = (КВыплате - Цел(КВыплате)) * 100;
		КонецЕсли;
		ПодразделениеВШапке = Неопределено;
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ПодразделениеВШапке", ПодразделениеВШапке);
		Если ПодразделениеВШапке <> Неопределено Тогда
			Макеты.ШапкаДокумента.Параметры.Подразделение = ПодразделениеВШапке;
		КонецЕсли;
		
		Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(Макеты.ШапкаДокумента.Параметры.Подразделение) Тогда
			Макеты.ШапкаДокумента.Параметры.Подразделение = Макеты.ШапкаДокумента.Параметры.Подразделение.ПолноеНаименование();
		КонецЕсли;
		
		ДокументРезультат.Вывести(Макеты.ШапкаДокумента);
		
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка, СтрокаОрганизации, СоответствиеПользовательскихПолей);
		ДокументРезультат.Вывести(Макеты.Шапка);
		
		НомерСтроки = 0;
		ПромежуточныеИтоги = ПромежуточныеИтогиПоСтраницеТ49(СоответствиеПользовательскихПолей, ПорядокДопНачислений, ПорядокДопУдержаний);
		
		Для Каждого СтрокаСотрудника Из СтрокаОрганизации.Строки Цикл
			ВывестиСотрудникаТ49(НомерСтроки, СтрокаСотрудника, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ПромежуточныеИтоги, ДанныеВедомости, КВыплатеПоВедомости, ПорядокДопНачислений, ПорядокДопУдержаний);
		КонецЦикла;
		ДополнитьСтраницуТ49(НомерСтроки, Макеты, ДокументРезультат, ПромежуточныеИтоги);
		Макеты.ИтогоПоВедомости.Параметры.Заполнить(СтрокаОрганизации);
		Для каждого СтрокаТаблицы Из ПорядокДопНачислений Цикл
			СуммаЯчейки = СтрокаОрганизации[СоответствиеПользовательскихПолей.Получить(СтрокаТаблицы.Имя)];
			Если СтрокаТаблицы.Имя = "ПрочиеНачисления" Тогда
				Для каждого КатегорияКолонки Из СтрокаТаблицы.КатегорииКолонки Цикл
					СуммаЯчейки = СуммаЯчейки + СтрокаОрганизации[СоответствиеПользовательскихПолей.Получить(КатегорияКолонки)];
				КонецЦикла;
			КонецЕсли;
			Макеты.ИтогоПоВедомости.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СуммаЯчейки;
		КонецЦикла;
		Для каждого СтрокаТаблицы Из ПорядокДопУдержаний Цикл
			СуммаЯчейки = СтрокаОрганизации[СоответствиеПользовательскихПолей.Получить(СтрокаТаблицы.Имя)];
			Если СтрокаТаблицы.Имя = "ПрочиеУдержания" Тогда
				Для каждого КатегорияКолонки Из СтрокаТаблицы.КатегорииКолонки Цикл
					СуммаЯчейки = СуммаЯчейки + СтрокаОрганизации[СоответствиеПользовательскихПолей.Получить(КатегорияКолонки)];
				КонецЦикла;
			КонецЕсли;
			Макеты.ИтогоПоВедомости.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СуммаЯчейки;
		КонецЦикла;
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ИтогоПоВедомости, СтрокаОрганизации, СоответствиеПользовательскихПолей);
		Макеты.Подвал.Параметры.Заполнить(СтрокаОрганизации);
		Если Документ <> Неопределено Тогда
			
			Макеты.Подвал.Параметры.ДолжностьКассира = ДанныеДокумента.ДолжностьКассира;
			ДанныеКассира = РасшифровкиПодписей.Найти(ДанныеДокумента.Кассир, "ФизическоеЛицо");
			Если ДанныеКассира <> Неопределено Тогда
				Макеты.Подвал.Параметры.ФИОКассира = ДанныеКассира.ИОФамилия;
			КонецЕсли; 
			
			ДанныеБухгалтера = РасшифровкиПодписей.Найти(ДанныеДокумента.Бухгалтер, "ФизическоеЛицо");
			Если ДанныеБухгалтера <> Неопределено Тогда
				Макеты.Подвал.Параметры.ФИОБухгалтера = ДанныеБухгалтера.ИОФамилия;
			КонецЕсли; 
			
		КонецЕсли;
		
		Макеты.ИтогоПоВедомости.Параметры.КВыплате = КВыплатеПоВедомости;
		ДокументРезультат.Вывести(Макеты.ИтогоПоВедомости);
		ДокументРезультат.Вывести(Макеты.Подвал);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиПодразделениеТ49(СтрокаПодразделения, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ПорядокДопНачислений, ПорядокДопУдержаний)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	КВыплатеПоВедомости = 0;
	
	Макеты.ШапкаДокумента.Параметры.Заполнить(СтрокаПодразделения);
	Макеты.ШапкаДокумента.Параметры.ДатаД = Формат(ЗарплатаКадрыКлиентСервер.ДатаСеанса(), "ДЛФ=D");
	Макеты.Шапка.Параметры.Заполнить(СтрокаПодразделения);
	Документ = Неопределено;
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("Документ", Документ);
	Если Документ <> Неопределено Тогда
		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Документ,
			"Номер, Дата, Руководитель, ДолжностьРуководителя, ГлавныйБухгалтер, Кассир, ДолжностьКассира, Бухгалтер");
		
	Иначе
		ДанныеДокумента = Новый Структура("Организация,Руководитель,ДолжностьРуководителя,ГлавныйБухгалтер,Кассир,ДолжностьКассира", СтрокаПодразделения.Организация);
		ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ДанныеДокумента, КонецМесяца(СтрокаПодразделения.МесяцНачисления));
		ДанныеДокумента.Удалить("Организация");
		ДанныеДокумента.Вставить("Номер", "");
		ДанныеДокумента.Вставить("Дата", "");
		ДанныеДокумента.Вставить("Бухгалтер", Справочники.ФизическиеЛица.ПустаяСсылка());
		
	КонецЕсли;

	СписокОтветственных = Новый Массив;
	Если ЗначениеЗаполнено(ДанныеДокумента.Руководитель) Тогда
		СписокОтветственных.Добавить(ДанныеДокумента.Руководитель);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ДанныеДокумента.ГлавныйБухгалтер) Тогда
		СписокОтветственных.Добавить(ДанныеДокумента.ГлавныйБухгалтер);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ДанныеДокумента.Кассир) Тогда
		СписокОтветственных.Добавить(ДанныеДокумента.Кассир);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ДанныеДокумента.Бухгалтер) Тогда
		СписокОтветственных.Добавить(ДанныеДокумента.Бухгалтер);
	КонецЕсли; 
	
	РасшифровкиПодписей = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, СписокОтветственных,"ИОФамилия", КонецМесяца(СтрокаПодразделения.МесяцНачисления));
	
	Для каждого СтрокаТаблицы Из ПорядокДопНачислений Цикл
		Макеты.Шапка.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СтрокаТаблицы.Заголовок;
	КонецЦикла;
	Для каждого СтрокаТаблицы Из ПорядокДопУдержаний Цикл
		Макеты.Шапка.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СтрокаТаблицы.Заголовок;
	КонецЦикла;
	
	Макеты.ШапкаДокумента.Параметры.НомерД = ДанныеДокумента.Номер;
	Макеты.ШапкаДокумента.Параметры.ДатаД = ДанныеДокумента.Дата;
	
	Макеты.ШапкаДокумента.Параметры.ДолжностьРуководителя = ДанныеДокумента.ДолжностьРуководителя;
	ДанныеРуководителя = РасшифровкиПодписей.Найти(ДанныеДокумента.Руководитель, "ФизическоеЛицо");
	Если ДанныеРуководителя <> Неопределено Тогда
		Макеты.ШапкаДокумента.Параметры.РуководительРасшифровкаПодписи = ДанныеРуководителя.ИОФамилия;
	КонецЕсли; 
	
	ДанныеГлавногоБухгалтера = РасшифровкиПодписей.Найти(ДанныеДокумента.ГлавныйБухгалтер, "ФизическоеЛицо");
	Если ДанныеГлавногоБухгалтера <> Неопределено Тогда
		Макеты.ШапкаДокумента.Параметры.ГлавныйБухгалтерРасшифровкаПодписи = ДанныеГлавногоБухгалтера.ИОФамилия;
	КонецЕсли; 
	
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ШапкаДокумента, СтрокаПодразделения, СоответствиеПользовательскихПолей);
	Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(Макеты.ШапкаДокумента.Параметры.Подразделение) Тогда
		Макеты.ШапкаДокумента.Параметры.Подразделение = Макеты.ШапкаДокумента.Параметры.Подразделение.ПолноеНаименование();
	КонецЕсли; 
	ДокументРезультат.Вывести(Макеты.ШапкаДокумента);
	ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка, СтрокаПодразделения, СоответствиеПользовательскихПолей);
	ДокументРезультат.Вывести(Макеты.Шапка);
	НомерСтроки = 0;
	ПромежуточныеИтоги = ПромежуточныеИтогиПоСтраницеТ49(СоответствиеПользовательскихПолей, ПорядокДопНачислений, ПорядокДопУдержаний);
	
	ДанныеВедомости = Неопределено;
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ДанныеВедомости", ДанныеВедомости);
	Для Каждого СтрокаСотрудника Из СтрокаПодразделения.Строки Цикл
		ВывестиСотрудникаТ49(НомерСтроки, СтрокаСотрудника, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ПромежуточныеИтоги, ДанныеВедомости, КВыплатеПоВедомости, ПорядокДопНачислений, ПорядокДопУдержаний);
	КонецЦикла;
	ДополнитьСтраницуТ49(НомерСтроки, Макеты, ДокументРезультат, ПромежуточныеИтоги);
	Макеты.ИтогоПоВедомости.Параметры.Заполнить(СтрокаПодразделения);
	Для каждого СтрокаТаблицы Из ПорядокДопНачислений Цикл
		СуммаЯчейки = СтрокаПодразделения[СоответствиеПользовательскихПолей.Получить(СтрокаТаблицы.Имя)];
		Если СтрокаТаблицы.Имя = "ПрочиеНачисления" Тогда
			Для каждого КатегорияКолонки Из СтрокаТаблицы.КатегорииКолонки Цикл
				СуммаЯчейки = СуммаЯчейки + СтрокаПодразделения[СоответствиеПользовательскихПолей.Получить(КатегорияКолонки)];
			КонецЦикла;
		КонецЕсли;
		Макеты.ИтогоПоВедомости.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СуммаЯчейки;
	КонецЦикла;
	Для каждого СтрокаТаблицы Из ПорядокДопУдержаний Цикл
		СуммаЯчейки = СтрокаПодразделения[СоответствиеПользовательскихПолей.Получить(СтрокаТаблицы.Имя)];
		Если СтрокаТаблицы.Имя = "ПрочиеУдержания" Тогда
			Для каждого КатегорияКолонки Из СтрокаТаблицы.КатегорииКолонки Цикл
				СуммаЯчейки = СуммаЯчейки + СтрокаПодразделения[СоответствиеПользовательскихПолей.Получить(КатегорияКолонки)];
			КонецЦикла;
		КонецЕсли;
		Макеты.ИтогоПоВедомости.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СуммаЯчейки;
	КонецЦикла;
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ИтогоПоВедомости, СтрокаПодразделения, СоответствиеПользовательскихПолей);
	Макеты.Подвал.Параметры.Заполнить(СтрокаПодразделения);
	Если Документ <> Неопределено Тогда
		
		Макеты.Подвал.Параметры.ДолжностьКассира = ДанныеДокумента.ДолжностьКассира;
		ДанныеКассира = РасшифровкиПодписей.Найти(ДанныеДокумента.Кассир, "ФизическоеЛицо");
		Если ДанныеКассира <> Неопределено Тогда
			Макеты.Подвал.Параметры.ФИОКассира = ДанныеКассира.ИОФамилия;
		КонецЕсли; 
		
		ДанныеБухгалтера = РасшифровкиПодписей.Найти(ДанныеДокумента.Бухгалтер, "ФизическоеЛицо");
		Если ДанныеБухгалтера <> Неопределено Тогда
			Макеты.Подвал.Параметры.ФИОБухгалтера = ДанныеБухгалтера.ИОФамилия;
		КонецЕсли; 
			
	КонецЕсли;
	
	Макеты.ИтогоПоВедомости.Параметры.КВыплате = КВыплатеПоВедомости;
	
	ДокументРезультат.Вывести(Макеты.ИтогоПоВедомости);
	ДокументРезультат.Вывести(Макеты.Подвал);
	
КонецПроцедуры

Процедура ВывестиСотрудникаТ49(НомерСтроки, СтрокаСотрудника, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ПромежуточныеИтоги, ДанныеВедомости, КВыплатеПоВедомости, ПорядокДопНачислений, ПорядокДопУдержаний)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	Если ДанныеВедомости <> Неопределено Тогда
		СтрокаДанныхВедомости = ДанныеВедомости.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник");
		Если СтрокаДанныхВедомости <> Неопределено Тогда
			СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("КВыплате")] = СтрокаДанныхВедомости.КВыплате;
		КонецЕсли;
	КонецЕсли;
	
	НомерСтроки = НомерСтроки + 1;
	Макеты.Строка.Параметры.Заполнить(СтрокаСотрудника);
	
	Если НЕ НастройкиПечатныхФорм.ВыводитьПолныеФИОВСписочныхПечатныхФормах Тогда
		Макеты.Строка.Параметры.СотрудникФизическоеЛицоФИО = ФизическиеЛицаКлиентСервер.ФамилияИнициалыФизЛица(СтрокаСотрудника.СотрудникФизическоеЛицоФИО);
	КонецЕсли;
	
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Строка, СтрокаСотрудника, СоответствиеПользовательскихПолей);
	Для каждого СтрокаТаблицы Из ПорядокДопНачислений Цикл
		СуммаЯчейки = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить(СтрокаТаблицы.Имя)];
		Если СтрокаТаблицы.Имя = "ПрочиеНачисления" Тогда
			Для каждого КатегорияКолонки Из СтрокаТаблицы.КатегорииКолонки Цикл
				СуммаЯчейки = СуммаЯчейки + СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить(КатегорияКолонки)];
			КонецЦикла;
		КонецЕсли;
		Макеты.Строка.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СуммаЯчейки;
	КонецЦикла;
	Для каждого СтрокаТаблицы Из ПорядокДопУдержаний Цикл
		СуммаЯчейки = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить(СтрокаТаблицы.Имя)];
		Если СтрокаТаблицы.Имя = "ПрочиеУдержания" Тогда
			Для каждого КатегорияКолонки Из СтрокаТаблицы.КатегорииКолонки Цикл
				СуммаЯчейки = СуммаЯчейки + СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить(КатегорияКолонки)];
			КонецЦикла;
		КонецЕсли;
		Макеты.Строка.Параметры["Колонка" + СтрокаТаблицы.НомерКолонки] = СуммаЯчейки;
	КонецЦикла;
	
	ОтработаноРабочихДней = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноРабочихДней")];
	ОтработаноРабочихЧасов = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноРабочихЧасов")];
	ОтработаноПраздничныхДней = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноПраздничныхДней")];
	ОтработаноПраздничныхЧасов = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноПраздничныхЧасов")];
	ОтработаноВыходныхДней = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноВыходныхДней")];
	ОтработаноВыходныхЧасов = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноВыходныхЧасов")];
	
	Если ОтработаноРабочихДней <> NULL И ОтработаноРабочихДней > 0 Тогда 
		Макеты.Строка.Параметры.ОтработаноРабочихДней = "" + ОтработаноРабочихДней + " (" + ОтработаноРабочихЧасов + ")";
	Иначе
		Макеты.Строка.Параметры.ОтработаноРабочихДней = "";
	КонецЕсли;
	
	Если ОтработаноПраздничныхДней <> NULL И ОтработаноПраздничныхДней > 0 Тогда 
		Макеты.Строка.Параметры.ОтработаноПраздничныхДней = "" + ОтработаноПраздничныхДней + " (" + ОтработаноПраздничныхЧасов + ")";
	Иначе
		Макеты.Строка.Параметры.ОтработаноПраздничныхДней = "";
	КонецЕсли;
	
	Если ОтработаноВыходныхДней <> NULL И ОтработаноВыходныхДней > 0 Тогда 
		Макеты.Строка.Параметры.ОтработаноВыходныхДней = "" + ОтработаноВыходныхДней + " (" + ОтработаноВыходныхЧасов + ")";
	Иначе
		Макеты.Строка.Параметры.ОтработаноВыходныхДней = "";
	КонецЕсли;
	
	Макеты.Строка.Параметры.НомерПП = НомерСтроки;
	
	МассивВыводимыхОбластей = Новый Массив;
	МассивВыводимыхОбластей.Добавить(Макеты.Строка);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоСтранице);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоВедомости);
	МассивВыводимыхОбластей.Добавить(Макеты.Подвал);
	Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, МассивВыводимыхОбластей) Тогда
		ЗаполнитьЗначенияСвойств(Макеты.ИтогоПоСтранице.Параметры, ПромежуточныеИтоги);
		ДокументРезультат.Вывести(Макеты.ИтогоПоСтранице);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка, СтрокаСотрудника, СоответствиеПользовательскихПолей);
		ДокументРезультат.Вывести(Макеты.Шапка);
		ПромежуточныеИтоги = ПромежуточныеИтогиПоСтраницеТ49(СоответствиеПользовательскихПолей, ПорядокДопНачислений, ПорядокДопУдержаний);
	КонецЕсли;
	
	Если Макеты.Строка.Параметры.КВыплате < 0 Тогда
		Макеты.Строка.Параметры.КВыплате = 0;
	КонецЕсли;
	
	ДобавитьВПромежуточныйИтог(ПромежуточныеИтоги, Макеты.Строка.Параметры);
	КВыплатеПоВедомости = КВыплатеПоВедомости + Макеты.Строка.Параметры.КВыплате;
	ДокументРезультат.Вывести(Макеты.Строка);
	
КонецПроцедуры

Процедура ДополнитьСтраницуТ49(НомерСтроки, Макеты, ДокументРезультат, ПромежуточныеИтоги)
	
	МассивВыводимыхОбластей = Новый Массив;
	МассивВыводимыхОбластей.Добавить(Макеты.ПустаяСтрока);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоСтранице);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоВедомости);
	МассивВыводимыхОбластей.Добавить(Макеты.Подвал);
	Пока ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, МассивВыводимыхОбластей) Цикл
		ДокументРезультат.Вывести(Макеты.ПустаяСтрока);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Макеты.ИтогоПоСтранице.Параметры, ПромежуточныеИтоги);
	ДокументРезультат.Вывести(Макеты.ИтогоПоСтранице);
	
КонецПроцедуры

Функция ПромежуточныеИтогиПоСтраницеТ49(СоответствиеПользовательскихПолей, ПорядокДопНачислений, ПорядокДопУдержаний)
	
	ПромежуточныеИтоги = Новый Структура;
	
	Для каждого СтрокаТаблицы Из ПорядокДопНачислений Цикл
		ПромежуточныеИтоги.Вставить("Колонка" + СтрокаТаблицы.НомерКолонки, 0);
	КонецЦикла;
	Для каждого СтрокаТаблицы Из ПорядокДопУдержаний Цикл
		ПромежуточныеИтоги.Вставить("Колонка" + СтрокаТаблицы.НомерКолонки, 0);
	КонецЦикла;
	ПромежуточныеИтоги.Вставить("ВсегоНачислено", 0);
	ПромежуточныеИтоги.Вставить("ДолгЗаОрганизацией", 0);
	ПромежуточныеИтоги.Вставить("ДолгЗаСотрудником", 0);
	ПромежуточныеИтоги.Вставить("КВыплате", 0);
	
	Возврат ПромежуточныеИтоги;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функции формирование отчета по макету ПФ_MXL_ФормаКНД1151087

Процедура ВывестиКарточкуПоДСВ(ДокументРезультат, ДанныеФизЛиц, Макет, КадровыеДанные, СведенияОРегистрации, ОбщиеНастройкиМакета)
	
	Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	Раздел = Макет.ПолучитьОбласть("Раздел");
	
	ЗарплатаКадры.ВывестиДанныеПобуквенно(ДанныеФизЛиц.ОрганизацияИНН, Раздел, "Организация_ИНН_", 12);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(СведенияОРегистрации.КПП, Раздел, "Организация_КПП_", 9);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(СведенияОРегистрации.Код, Раздел, "ИФНС_", 4);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(СтрЗаменить(Формат(ОбщиеНастройкиМакета.ДатаАктуальности, "ДЛФ=D"),".",""), Раздел, "Дата", 8);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(Формат(ДанныеФизЛиц.Год, "ЧГ=0"), Раздел, "Год", 4);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(Формат(ОбщиеНастройкиМакета.ПервыйНомер, "ЧГ=0"), Раздел,                   "Номер", 8);
	
	ЗарплатаКадры.ВывестиДанныеПобуквенно(ДанныеФизЛиц.ОрганизацияНаименованиеСокращенное, Раздел, "Организация_Наименование_", 160);
	
	Раздел.Параметры.ФИООтветственного = ОбщиеНастройкиМакета.Ответственный;
	Раздел.Параметры.ДолжностьОтветственного = ОбщиеНастройкиМакета.ДолжностьОтветственного;
	
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.Фамилия, Раздел,				"ФизЛицо_Фамилия_", 33);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.Имя, Раздел,					"ФизЛицо_Имя_", 33);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.Отчество, Раздел,				"ФизЛицо_Отчество_", 33);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.ИНН, Раздел,					"ФизЛицо_ИНН_", 12);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.ДокументКодМВД, Раздел,		"ФизЛицо_КодДокументаУдЛичн_", 2);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.ДокументСерияНомер, Раздел, 	"ФизЛицо_СерияНомерДокументаУдЛичн_", 25);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.АдресИндекс, Раздел,			"ФизЛицо_АдресИндекс_", 6);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.АдресКодРегиона, Раздел,		"ФизЛицо_АдресРегион_", 2);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.АдресРайон, Раздел,			"ФизЛицо_АдресРайон_", 33);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.АдресГород, Раздел,			"ФизЛицо_АдресГород_", 33);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.АдресНаселенныйПункт, Раздел,	"ФизЛицо_АдресНаселенныйПункт_", 33);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.АдресУлица, Раздел,			"ФизЛицо_АдресУлица_", 33);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.АдресДом, Раздел,				"ФизЛицо_АдресДом_", 8);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.АдресКорпус, Раздел,			"ФизЛицо_АдресКорпус_", 8);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(КадровыеДанные.АдресКвартира, Раздел,			"ФизЛицо_АдресКвартира_", 8);
	ЗарплатаКадры.ВывестиДанныеПобуквенно(Прав("           " + Формат(ДанныеФизЛиц.Сумма,"ЧЦ=11; ЧС=-2; ЧГ=0"),11), Раздел, "СуммаВзносовРубли_", 11);
	
	ДокументРезультат.Вывести(Раздел); 
	
	Если ОбщиеНастройкиМакета.ПервыйНомер <> 0 Тогда
		ОбщиеНастройкиМакета.ПервыйНомер = ОбщиеНастройкиМакета.ПервыйНомер + 1;
	КонецЕсли; 
	
КонецПроцедуры

Функция КадровыеДанныеФизическогоЛица(КадровыеДанные, ФизическоеЛицо)
	
	КадровыеДанныеФизическогоЛица = КадровыеДанные.Найти(ФизическоеЛицо, "ФизическоеЛицо");
	
	ДанныеФизическогоЛица = Новый Структура;
	
	ДанныеФизическогоЛица.Вставить("Фамилия", "");
	ДанныеФизическогоЛица.Вставить("Имя", "");
	ДанныеФизическогоЛица.Вставить("Отчество", "");
	ДанныеФизическогоЛица.Вставить("ИНН", "");
	ДанныеФизическогоЛица.Вставить("ДокументКодМВД", "");
	ДанныеФизическогоЛица.Вставить("ДокументСерияНомер", "");
	ДанныеФизическогоЛица.Вставить("АдресИндекс", "");
	ДанныеФизическогоЛица.Вставить("АдресКодРегиона", "");
	ДанныеФизическогоЛица.Вставить("АдресРайон", "");
	ДанныеФизическогоЛица.Вставить("АдресГород", "");
	ДанныеФизическогоЛица.Вставить("АдресНаселенныйПункт", "");
	ДанныеФизическогоЛица.Вставить("АдресУлица", "");
	ДанныеФизическогоЛица.Вставить("АдресДом", "");
	ДанныеФизическогоЛица.Вставить("АдресКорпус", "");
	ДанныеФизическогоЛица.Вставить("АдресКвартира", "");
		
	Если КадровыеДанныеФизическогоЛица <> Неопределено Тогда
		
		ДанныеФизическогоЛица.Вставить("Фамилия", КадровыеДанныеФизическогоЛица.Фамилия);
		ДанныеФизическогоЛица.Вставить("Имя", КадровыеДанныеФизическогоЛица.Имя);
		ДанныеФизическогоЛица.Вставить("Отчество", КадровыеДанныеФизическогоЛица.Отчество);
		ДанныеФизическогоЛица.Вставить("ИНН", КадровыеДанныеФизическогоЛица.ИНН);
		ДанныеФизическогоЛица.Вставить("ДокументКодМВД", КадровыеДанныеФизическогоЛица.ДокументКодМВД);
		
		ДокументСерияНомер = "";
		Если ЗначениеЗаполнено(КадровыеДанныеФизическогоЛица.ДокументСерия) Тогда
			ДокументСерияНомер = КадровыеДанныеФизическогоЛица.ДокументСерия;
		КонецЕсли; 
		Если ЗначениеЗаполнено(КадровыеДанныеФизическогоЛица.ДокументНомер) Тогда
			ДокументСерияНомер = ?(ПустаяСтрока(ДокументСерияНомер), "", ДокументСерияНомер + " ")
				+ КадровыеДанныеФизическогоЛица.ДокументНомер;
		КонецЕсли; 
		ДанныеФизическогоЛица.Вставить("ДокументСерияНомер", ДокументСерияНомер);
		
		Если ЗначениеЗаполнено(КадровыеДанныеФизическогоЛица.АдресПоПрописке) Тогда
			
			СтруктураАдреса = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(КадровыеДанныеФизическогоЛица.АдресПоПрописке);
			
			ДанныеФизическогоЛица.Вставить("АдресИндекс", СтруктураАдреса.Индекс);
			
			Если ЗначениеЗаполнено(СтруктураАдреса.Регион) Тогда
				ДанныеФизическогоЛица.Вставить("АдресКодРегиона", КодРегионаРФ(СтруктураАдреса.Регион));
			КонецЕсли; 
			
			ДанныеФизическогоЛица.Вставить("АдресРайон", СтруктураАдреса.Район);
			
			Если НЕ ЗначениеЗаполнено(СтруктураАдреса.Город) Тогда
				
				Если ДанныеФизическогоЛица.АдресКодРегиона = "77"
					ИЛИ ДанныеФизическогоЛица.АдресКодРегиона = "78" Тогда
					ДанныеФизическогоЛица.Вставить("АдресГород", СтруктураАдреса.Регион);
				КонецЕсли; 
				
			Иначе
				ДанныеФизическогоЛица.Вставить("АдресГород", СтруктураАдреса.Город);
			КонецЕсли; 
			
			ДанныеФизическогоЛица.Вставить("АдресНаселенныйПункт", СтруктураАдреса.НаселенныйПункт);
			ДанныеФизическогоЛица.Вставить("АдресУлица", СтруктураАдреса.Улица);
			ДанныеФизическогоЛица.Вставить("АдресДом", СтруктураАдреса.Дом);
			ДанныеФизическогоЛица.Вставить("АдресКорпус", СтруктураАдреса.Корпус);
			ДанныеФизическогоЛица.Вставить("АдресКвартира", СтруктураАдреса.Квартира);
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат ДанныеФизическогоЛица;
	
КонецФункции

// Выделяет из кода элемента адресного классификатора код региона (24 и 25 цифры кода)
//
// Параметры
//  КодАдресногоЭлемента  - Строка - код элемента  адресного классификатора
//
// Возвращаемое значение:
//   Строка   - код региона РФ
//
Функция КодРегионаРФ(Регион)

	КодРегиона = "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регион", Регион);
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АдресныйКлассификатор.Код
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 1
		|	И &Регион = АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Код = Формат(Выборка.Код, "ЧГ=");
		
		КодРегиона = Лев(Код, 23 - СтрДлина(Код));
		КодРегиона =  Прав("00" + КодРегиона, 2);
		
	КонецЕсли; 
	
	Возврат КодРегиона;
	
КонецФункции 

Процедура ПроверитьЗначенияПараметров(НастройкиОтчета, ОбщиеНастройки)
	
	ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПервыйНомер"));
	Если НЕ ЗначениеПараметра.Использование Тогда
		ЗначениеПараметра.Значение = 0;
	КонецЕсли; 
	ЗначениеПараметра.Использование = Истина;
	ОбщиеНастройки.Вставить("ПервыйНомер", ЗначениеПараметра.Значение);
	
	ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Ответственный"));
	Если НЕ ЗначениеПараметра.Использование Тогда
		ЗначениеПараметра.Значение = Неопределено;
	КонецЕсли; 
	ЗначениеПараметра.Использование = Истина;
	
	Ответственный = "";
	Если ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда
		
		КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, ЗначениеПараметра.Значение, "ИОФамилия");
		Если КадровыеДанные.Количество() > 0 Тогда
			Ответственный = КадровыеДанные[0].ИОФамилия;
		КонецЕсли;
		
	КонецЕсли;
	ОбщиеНастройки.Вставить("Ответственный", Ответственный);
	
	ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДолжностьОтветственного"));
	Если НЕ ЗначениеПараметра.Использование Тогда
		ЗначениеПараметра.Значение = Неопределено;
	КонецЕсли; 
	ЗначениеПараметра.Использование = Истина;
	ОбщиеНастройки.Вставить("ДолжностьОтветственного", ЗначениеПараметра.Значение);
	
КонецПроцедуры

Функция РеквизитыРегистрацийВНалоговомОрганеСтруктурныхЕдиниц(СтруктурныеЕдиницы)
	
	РеквизитыРегистраций = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СтруктурныеЕдиницы", СтруктурныеЕдиницы);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СтруктурныеЕдиницы.Период,
		|	СтруктурныеЕдиницы.СтруктурнаяЕдиница
		|ПОМЕСТИТЬ ВТСтруктурныеЕдиницы
		|ИЗ
		|	&СтруктурныеЕдиницы КАК СтруктурныеЕдиницы";
		
	Запрос.Выполнить();
		
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ИсторияРегистрацийВНалоговомОргане",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСтруктурныеЕдиницы",
			"СтруктурнаяЕдиница"));
		
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ИсторияРегистрацийВНалоговомОргане.Период КАК Период,
		|	ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	РегистрацииВНалоговомОргане.Код,
		|	РегистрацииВНалоговомОргане.КПП
		|ИЗ
		|	ВТИсторияРегистрацийВНалоговомОрганеСрезПоследних КАК ИсторияРегистрацийВНалоговомОргане
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|		ПО ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане = РегистрацииВНалоговомОргане.Ссылка
		|ИТОГИ ПО
		|	СтруктурнаяЕдиница";
		
	ВыборкаПоСтруктурнымЕдиницам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСтруктурнымЕдиницам.Следующий() Цикл
		
		КоллекцияПериодов = Новый Соответствие;
		ВыборкаПоПериодам = ВыборкаПоСтруктурнымЕдиницам.Выбрать();
		Пока ВыборкаПоПериодам.Следующий() Цикл
			
			СтруктураДанныхРегистрации = Новый Структура("Код,КПП");
			ЗаполнитьЗначенияСвойств(СтруктураДанныхРегистрации, ВыборкаПоПериодам);
			
			КоллекцияПериодов.Вставить(ВыборкаПоПериодам.Период, СтруктураДанныхРегистрации);
			
		КонецЦикла; 
		
		РеквизитыРегистраций.Вставить(ВыборкаПоСтруктурнымЕдиницам.СтруктурнаяЕдиница, КоллекцияПериодов);
		
	КонецЦикла; 
	
	Возврат РеквизитыРегистраций;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры и Функции

// Дополнение строк промежуточного итога
//
Процедура ДобавитьВПромежуточныйИтог(ПромежуточныеИтоги, ДанныеСтроки) Экспорт
	
	Для каждого ПромежуточныйИтог Из ПромежуточныеИтоги Цикл
		ПромежуточныеИтоги.Вставить(ПромежуточныйИтог.Ключ, ПромежуточныйИтог.Значение + ДанныеСтроки[ПромежуточныйИтог.Ключ]);
	КонецЦикла;
	
КонецПроцедуры

//ГФ
Функция ДополнительнаяИнформацияГФ(СтруктураДляПараметровЗапроса)
	
	Структура = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Значение КАК Значение,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Показатель КАК Показатель
		|ПОМЕСТИТЬ ВТ_КвПлан
		|ИЗ
		|	РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.СрезПоследних(
		|			&ДатаОкончания,
		|			ФизическоеЛицо В (&Физик)
		|				И Показатель В (&ПоказателиКвПлан)) КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ДействуетДо = &ПустаяДата
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ДействуетДо > &ДатаНачала
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Сотрудник КАК Сотрудник,
		|	ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Показатель КАК Показатель,
		|	СУММА(ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Значение) КАК Значение
		|ПОМЕСТИТЬ ВТ_КвПоказатели
		|ИЗ
		|	РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников
		|ГДЕ
		|	ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Показатель В(&ПоказателиОтгрузкиПрибыли)
		|	И ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.ПериодДействия МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, КВАРТАЛ) И КОНЕЦПЕРИОДА(&ДатаОкончания, КВАРТАЛ)
		|	И ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Сотрудник.ФизическоеЛицо В(&Физик)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Сотрудник,
		|	ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Показатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Сотрудник КАК Сотрудник,
		|	ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Показатель КАК Показатель,
		|	СУММА(ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Значение) КАК Значение
		|ИЗ
		|	РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников
		|ГДЕ
		|	ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Показатель В(&ПоказателиОтгрузкиПрибыли)
		|	И ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.ПериодДействия МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Сотрудник.ФизическоеЛицо В(&Физик)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Сотрудник,
		|	ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Показатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_КвПлан.Сотрудник КАК Сотрудник,
		|	ВТ_КвПлан.Показатель КАК Показатель,
		|	ВТ_КвПлан.Значение КАК Значение
		|ИЗ
		|	ВТ_КвПлан КАК ВТ_КвПлан
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_КвПоказатели.Сотрудник,
		|	ВТ_КвПоказатели.Показатель,
		|	ВТ_КвПоказатели.Значение
		|ИЗ
		|	ВТ_КвПоказатели КАК ВТ_КвПоказатели";
		
	КвартальныйПлан    = Справочники.ПоказателиРасчетаЗарплаты.НайтиПоНаименованию("КвартальныйПлан");	
	КвартальныйПланUSD = Справочники.ПоказателиРасчетаЗарплаты.НайтиПоНаименованию("КвартальныйПланUSD");
	
	ОтгрузкиТМ    = Справочники.ПоказателиРасчетаЗарплаты.НайтиПоНаименованию("ОтгрузкиТМ");
	ОтгрузкиТМНал = Справочники.ПоказателиРасчетаЗарплаты.НайтиПоНаименованию("ОтгрузкиТМНал");
	ПрибыльUSDТМ  = Справочники.ПоказателиРасчетаЗарплаты.НайтиПоНаименованию("ПрибыльUSDТМ");
	
	ПоказателиКвПлан = Новый Массив;
	ПоказателиКвПлан.Добавить(КвартальныйПлан);
	ПоказателиКвПлан.Добавить(КвартальныйПланUSD);
		
	ПоказателиОтгрузкиПрибыли = Новый Массив;
	ПоказателиОтгрузкиПрибыли.Добавить(ОтгрузкиТМ);
	ПоказателиОтгрузкиПрибыли.Добавить(ОтгрузкиТМНал);
	ПоказателиОтгрузкиПрибыли.Добавить(ПрибыльUSDТМ);
	
	Запрос.УстановитьПараметр("ДатаНачала", СтруктураДляПараметровЗапроса.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", СтруктураДляПараметровЗапроса.ДатаОкончания);
	Запрос.УстановитьПараметр("ПоказателиКвПлан", ПоказателиКвПлан);
	Запрос.УстановитьПараметр("ПоказателиОтгрузкиПрибыли", ПоказателиОтгрузкиПрибыли);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	Запрос.УстановитьПараметр("Физик", СтруктураДляПараметровЗапроса.СписокФизЛиц);
	
	РезультатПакета = Запрос.ВыполнитьПакет();
	КвартальныеЗначения = РезультатПакета[3].Выгрузить();
	МесячныеЗначения    = РезультатПакета[2].Выгрузить();
	
	//Будем считать что если у сотрудника есть показатель по ПрибыльUSDТМ то его считаем по новой схемме
	Поиск_Прибыль = КвартальныеЗначения.НайтиСтроки(Новый Структура("Показатель",ПрибыльUSDТМ));
	Поиск_План    = КвартальныеЗначения.НайтиСтроки(Новый Структура("Показатель",КвартальныйПланUSD));
	
	Если Поиск_Прибыль.Количество() > 0 ИЛИ Поиск_План.Количество() > 0 Тогда // считаем по новой схемме
		
		СтрП_М = МесячныеЗначения.Найти(ПрибыльUSDТМ,"Показатель");
		СтрП_К = КвартальныеЗначения.Найти(ПрибыльUSDТМ,"Показатель");
		СтрП_П = КвартальныеЗначения.Найти(КвартальныйПланUSD,"Показатель");
		
		ПланКв     = ?(СтрП_П = Неопределено,0,СтрП_П.Значение); 	
		ПрибыльКв  = ?(СтрП_К = Неопределено,0,СтрП_К.Значение);
		ПрибыльМес = ?(СтрП_М = Неопределено,0,СтрП_М.Значение);
		Остаток    = ПланКв - ПрибыльКв;
		
		Структура = Новый Структура("ВидРасчета, ПланКв, ПрибыльКв, ПрибыльМес, Остаток","Новый",ПланКв,ПрибыльКв,ПрибыльМес,Остаток);
				
	Иначе
		
		Стр_ОН   = КвартальныеЗначения.Найти(ОтгрузкиТМНал,"Показатель");
		Стр_ОБ   = КвартальныеЗначения.Найти(ОтгрузкиТМ,"Показатель");
		Стр_П    = КвартальныеЗначения.Найти(КвартальныйПлан,"Показатель");
		Стр_ОН_М = МесячныеЗначения.Найти(ОтгрузкиТМНал,"Показатель");
		Стр_ОБ_М = МесячныеЗначения.Найти(ОтгрузкиТМ,"Показатель");
		
		ПланКв    = ?(Стр_П = Неопределено,0,Стр_П.Значение);
		ОтгрузкиМ_Нал = ?(Стр_ОН_М = Неопределено,0,Стр_ОН_М.Значение);
		ОтгрузкиМ_БН  = ?(Стр_ОБ_М = Неопределено,0,Стр_ОБ_М.Значение);
		ОтгрузкиКв_Нал = ?(Стр_ОН = Неопределено,0,Стр_ОН.Значение);
		ОтгрузкиКв_БН  = ?(Стр_ОБ = Неопределено,0,Стр_ОБ.Значение);
		Остаток   = ПланКв - (ОтгрузкиКв_Нал + ОтгрузкиКв_БН);
		
		Структура = Новый Структура("ВидРасчета, ПланКв, ОтгрузкиКв, ОтгрузкиМес, Остаток","Старый",ПланКв,ОтгрузкиКв_Нал + ОтгрузкиКв_БН,ОтгрузкиМ_Нал + ОтгрузкиМ_БН,Остаток);
		
	КонецЕсли;	
	
	Возврат Структура;
	
КонецФункции // ДополнительнаяИнформацияГФ()
 
//ГФ


#КонецЕсли





///из модуля менеджера

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
   НастройкиОтчета.ОпределитьНастройкиФормы = Истина;  
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетныйЛистокПодробнее") Тогда
		
		ПечатаемыйДокумент = Неопределено;
		Если МассивОбъектов.Количество() > 1 Тогда
			ПечатаемыйДокумент = МассивОбъектов[1];
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"РасчетныйЛистокПодробнее",
			"РасчетныйЛисток",
			ПечатаемыйДокумент);
						
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьТ49(Документ) Экспорт
	
	ОтчетОбъект = Отчеты.РасчетныйЛисток_ГФ.Создать();
	
	ВариантОтчета = ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек.Найти("Т49");
	Если ВариантОтчета= Неопределено Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	НастройкиОтчета = ВариантОтчета.Настройки;
	
	Период = Документ.ПериодРегистрации;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Период", Новый СтандартныйПериод(НачалоМесяца(Период), КонецМесяца(Период)));
	СтруктураПараметров.Вставить("НачалоПериода",				НачалоМесяца(Период));
	СтруктураПараметров.Вставить("КонецПериода",				КонецМесяца(Период));
	
	Для каждого ПараметрЗаполнения Из СтруктураПараметров Цикл
		
		ПараметрКомпоновкиДанных = Новый ПараметрКомпоновкиДанных(ПараметрЗаполнения.Ключ);
		ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКомпоновкиДанных);
		Если ЗначениеПараметра <> Неопределено Тогда
			ЗначениеПараметра.Значение = ПараметрЗаполнения.Значение;
			ЗначениеПараметра.Использование = Истина;
		Иначе
			НовыйПараметр = НастройкиОтчета.ПараметрыДанных.Элементы.Добавить();
			НовыйПараметр.Параметр = ПараметрКомпоновкиДанных;
			НовыйПараметр.Значение = ПараметрЗаполнения.Значение;
			НовыйПараметр.Использование = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеВедомости = Документы[Документ.Метаданные().Имя].ДанныеВедомостиДляПечати(Документ);
	СписокСотрудников = ДанныеВедомости.ВыгрузитьКолонку("Сотрудник");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			НастройкиОтчета.Отбор, "Сотрудник", СписокСотрудников, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
	
	Если ЗначениеЗаполнено(Документ.Подразделение) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			НастройкиОтчета.Отбор, "Подразделение", Документ.Подразделение, ВидСравненияКомпоновкиДанных.ВИерархии, , Истина);
	КонецЕсли;
	
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
	
	ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КлючВарианта", "Т49");
	ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Документ", Документ);
	ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ДанныеВедомости", ДанныеВедомости);
	Если ЗначениеЗаполнено(Документ.Подразделение) Тогда
		ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПодразделениеВШапке", Документ.Подразделение);
	КонецЕсли;
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ОтчетОбъект.СкомпоноватьРезультат(ДокументРезультат);
	
	Возврат ДокументРезультат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функции формирование отчета по макету РасчетныйЛисток

Процедура ВывестиОрганизациюРасчетныйЛисток(СтрокаОрганизации, ДокументРезультат, Макеты, ЕстьГруппировкаПоПодразделению, СоответствиеПользовательскихПолей, ГруппироватьПоИсточникамФинансирования, структураДляПараметровЗапроса, ОбъектыПечати) Экспорт 
	
	Если ЕстьГруппировкаПоПодразделению Тогда
		
		Для Каждого СтрокаПодразделения Из СтрокаОрганизации.Строки Цикл
			ВывестиПодразделениеРасчетныйЛисток(СтрокаПодразделения, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ГруппироватьПоИсточникамФинансирования,структураДляПараметровЗапроса,ОбъектыПечати);
		КонецЦикла;
		
	Иначе
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
			
		Для Каждого СтрокаПодразделения Из СтрокаОрганизации.Строки Цикл
			ДанныеПоНДФЛ  = ДанныеПоНДФЛ(СтрокаПодразделения.Строки, СтрокаПодразделения.МесяцНачисления);
			Для Каждого СтрокаСотрудника Из СтрокаПодразделения.Строки Цикл
				ВывестиСотрудникаРасчетныйЛисток(СтрокаСотрудника, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ДанныеПоНДФЛ, 
														ГруппироватьПоИсточникамФинансирования, структураДляПараметровЗапроса, ОбъектыПечати);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеПоНДФЛ(СтрокиСотрудников, МесяцНачисления)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Сотрудники", СтрокиСотрудников.ВыгрузитьКолонку("Сотрудник"));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(МесяцНачисления));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(МесяцНачисления));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&НачалоПериода КАК МесяцНачисления,
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&Сотрудники)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНачисления,
		|	ГоловнаяОрганизация,
		|	ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.Период КАК МесяцНачисления,
		|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	СУММА(ВЫБОР
		|			КОГДА ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Стандартные)
		|				ТОГДА ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.СуммаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ВычетНаФизлицо,
		|	СУММА(ВЫБОР
		|			КОГДА ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.СтандартныеНаДетей)
		|				ТОГДА ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.СуммаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ВычетНаДетей,
		|	СУММА(ВЫБОР
		|			КОГДА ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Имущественные)
		|				ТОГДА ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.СуммаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ВычетИмущественный,
		|	СУММА(ВЫБОР
		|			КОГДА ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
		|				ТОГДА ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.СуммаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ВычетСоциальный
		|ПОМЕСТИТЬ ВТВычетыПредварительно
		|{ВЫБРАТЬ
		|	МесяцНачисления,
		|	ФизическоеЛицо.*,
		|	ГоловнаяОрганизация.*,
		|	ВычетНаФизлицо,
		|	ВычетНаДетей,
		|	ВычетИмущественный,
		|	ВычетСоциальный}
		|ИЗ
		|	РегистрНакопления.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Обороты(&НачалоПериода, &КонецПериода, Месяц, ) КАК ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты
		|{ГДЕ
		|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.Период КАК МесяцНачисления,
		|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.ФизическоеЛицо.*,
		|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.ГоловнаяОрганизация.*}
		|
		|СГРУППИРОВАТЬ ПО
		|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.ФизическоеЛицо,
		|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.ГоловнаяОрганизация,
		|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛОбороты.Период
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИмущественныеВычетыНДФЛОбороты.Период,
		|	ИмущественныеВычетыНДФЛОбороты.ФизическоеЛицо,
		|	ИмущественныеВычетыНДФЛОбороты.ГоловнаяОрганизация,
		|	СУММА(ВЫБОР
		|			КОГДА ИмущественныеВычетыНДФЛОбороты.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Стандартные)
		|				ТОГДА ИмущественныеВычетыНДФЛОбороты.СуммаРасход
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА ИмущественныеВычетыНДФЛОбороты.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.СтандартныеНаДетей)
		|				ТОГДА ИмущественныеВычетыНДФЛОбороты.СуммаРасход
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА ИмущественныеВычетыНДФЛОбороты.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Имущественные)
		|				ТОГДА ИмущественныеВычетыНДФЛОбороты.СуммаРасход
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА ИмущественныеВычетыНДФЛОбороты.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
		|				ТОГДА ИмущественныеВычетыНДФЛОбороты.СуммаРасход
		|			ИНАЧЕ 0
		|		КОНЕЦ)
		|ИЗ
		|	РегистрНакопления.ИмущественныеВычетыНДФЛ.Обороты(&НачалоПериода, &КонецПериода, Месяц, ) КАК ИмущественныеВычетыНДФЛОбороты
		|{ГДЕ
		|	ИмущественныеВычетыНДФЛОбороты.Период КАК МесяцНачисления,
		|	ИмущественныеВычетыНДФЛОбороты.ФизическоеЛицо.*,
		|	ИмущественныеВычетыНДФЛОбороты.ГоловнаяОрганизация.*}
		|
		|СГРУППИРОВАТЬ ПО
		|	ИмущественныеВычетыНДФЛОбороты.ФизическоеЛицо,
		|	ИмущественныеВычетыНДФЛОбороты.ГоловнаяОрганизация,
		|	ИмущественныеВычетыНДФЛОбороты.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВычетыПредварительно.МесяцНачисления,
		|	ВычетыПредварительно.ФизическоеЛицо,
		|	ВычетыПредварительно.ГоловнаяОрганизация,
		|	СУММА(ВычетыПредварительно.ВычетНаФизлицо) КАК ВычетНаФизлицо,
		|	СУММА(ВычетыПредварительно.ВычетНаДетей) КАК ВычетНаДетей,
		|	СУММА(ВычетыПредварительно.ВычетИмущественный) КАК ВычетИмущественный,
		|	СУММА(ВычетыПредварительно.ВычетСоциальный) КАК ВычетСоциальный
		|ПОМЕСТИТЬ ВТВычеты
		|ИЗ
		|	ВТВычетыПредварительно КАК ВычетыПредварительно
		|
		|СГРУППИРОВАТЬ ПО
		|	ВычетыПредварительно.МесяцНачисления,
		|	ВычетыПредварительно.ФизическоеЛицо,
		|	ВычетыПредварительно.ГоловнаяОрганизация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СведенияОДоходахНДФЛОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СведенияОДоходахНДФЛОбороты.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	СУММА(СведенияОДоходахНДФЛОбороты.СуммаДоходаОборот) КАК ОблагаемыйДоход,
		|	СведенияОДоходахНДФЛОбороты.Период КАК МесяцНачисления
		|ПОМЕСТИТЬ ВТОблагаемыйДоход
		|{ВЫБРАТЬ
		|	ФизическоеЛицо.*,
		|	ГоловнаяОрганизация.*,
		|	ОблагаемыйДоход,
		|	МесяцНачисления}
		|ИЗ
		|	РегистрНакопления.СведенияОДоходахНДФЛ.Обороты(&НачалоПериода, &КонецПериода, Месяц, ) КАК СведенияОДоходахНДФЛОбороты
		|{ГДЕ
		|	СведенияОДоходахНДФЛОбороты.ФизическоеЛицо.*,
		|	СведенияОДоходахНДФЛОбороты.ГоловнаяОрганизация.*,
		|	СведенияОДоходахНДФЛОбороты.Период КАК МесяцНачисления}
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходахНДФЛОбороты.Период,
		|	СведенияОДоходахНДФЛОбороты.ГоловнаяОрганизация,
		|	СведенияОДоходахНДФЛОбороты.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияУдержанияПоСотрудникам.Период КАК МесяцНачисления,
		|	НачисленияУдержанияПоСотрудникам.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	НачисленияУдержанияПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету)
		|			ТОГДА НачисленияУдержанияПоСотрудникам.Сумма
		|		ИНАЧЕ -НачисленияУдержанияПоСотрудникам.Сумма
		|	КОНЕЦ КАК ДвижениеПоНДФЛ
		|ПОМЕСТИТЬ ВТДвиженияПоОстаткамНДФЛ
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.Период <= &КонецПериода
		|	И НачисленияУдержанияПоСотрудникам.НачислениеУдержание В (ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНачисления,
		|	ГоловнаяОрганизация,
		|	ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.МесяцНачисления КАК МесяцНачисления,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ЕСТЬNULL(ДвиженияПоОстаткамНДФЛПредыдущихПериодов.ДвижениеПоНДФЛ, 0)) КАК СуммаДолгНаНачалоПериодаНДФЛ
		|ПОМЕСТИТЬ ВТОстаткиЗадолженностиПоНДФЛ
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвиженияПоОстаткамНДФЛ КАК ДвиженияПоОстаткамНДФЛПредыдущихПериодов
		|		ПО Сотрудники.МесяцНачисления > ДвиженияПоОстаткамНДФЛПредыдущихПериодов.МесяцНачисления
		|			И Сотрудники.ГоловнаяОрганизация = ДвиженияПоОстаткамНДФЛПредыдущихПериодов.ГоловнаяОрганизация
		|			И Сотрудники.ФизическоеЛицо = ДвиженияПоОстаткамНДФЛПредыдущихПериодов.ФизическоеЛицо
		|
		|СГРУППИРОВАТЬ ПО
		|	Сотрудники.МесяцНачисления,
		|	Сотрудники.ГоловнаяОрганизация,
		|	Сотрудники.ФизическоеЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНачисления,
		|	ГоловнаяОрганизация,
		|	ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.МесяцНачисления КАК МесяцНачисления,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ЕСТЬNULL(ДвиженияПоОстаткамНДФЛ.ДвижениеПоНДФЛ, 0)) КАК ДвиженияТекущегоМесяца
		|ПОМЕСТИТЬ ВТДвиженияЗадолженностиПоНДФЛ
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвиженияПоОстаткамНДФЛ КАК ДвиженияПоОстаткамНДФЛ
		|		ПО Сотрудники.МесяцНачисления = ДвиженияПоОстаткамНДФЛ.МесяцНачисления
		|			И Сотрудники.ФизическоеЛицо = ДвиженияПоОстаткамНДФЛ.ФизическоеЛицо
		|			И Сотрудники.ГоловнаяОрганизация = ДвиженияПоОстаткамНДФЛ.ГоловнаяОрганизация
		|
		|СГРУППИРОВАТЬ ПО
		|	Сотрудники.МесяцНачисления,
		|	Сотрудники.ГоловнаяОрганизация,
		|	Сотрудники.ФизическоеЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНачисления,
		|	ГоловнаяОрганизация,
		|	ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗадолженностиПоНДФЛ.МесяцНачисления КАК МесяцНачисления,
		|	ДвиженияЗадолженностиПоНДФЛ.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ДвиженияЗадолженностиПоНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЕСТЬNULL(ОстаткиЗадолженностиПоНДФЛ.СуммаДолгНаНачалоПериодаНДФЛ, 0) КАК СуммаДолгНаНачалоПериодаНДФЛ,
		|	ЕСТЬNULL(ОстаткиЗадолженностиПоНДФЛ.СуммаДолгНаНачалоПериодаНДФЛ, 0) + ДвиженияЗадолженностиПоНДФЛ.ДвиженияТекущегоМесяца КАК СуммаДолгНаКонецПериодаНДФЛ
		|ПОМЕСТИТЬ ВТОстаткиНДФЛКЗачету
		|ИЗ
		|	ВТДвиженияЗадолженностиПоНДФЛ КАК ДвиженияЗадолженностиПоНДФЛ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиЗадолженностиПоНДФЛ КАК ОстаткиЗадолженностиПоНДФЛ
		|		ПО ДвиженияЗадолженностиПоНДФЛ.МесяцНачисления = ОстаткиЗадолженностиПоНДФЛ.МесяцНачисления
		|			И ДвиженияЗадолженностиПоНДФЛ.ГоловнаяОрганизация = ОстаткиЗадолженностиПоНДФЛ.ГоловнаяОрганизация
		|			И ДвиженияЗадолженностиПоНДФЛ.ФизическоеЛицо = ОстаткиЗадолженностиПоНДФЛ.ФизическоеЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНачисления,
		|	ГоловнаяОрганизация,
		|	ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.МесяцНачисления,
		|	Сотрудники.Сотрудник,
		|	Вычеты.ВычетНаФизлицо,
		|	Вычеты.ВычетНаДетей,
		|	Вычеты.ВычетИмущественный,
		|	Вычеты.ВычетСоциальный,
		|	ОблагаемыйДоходПомесячно.ОблагаемыйДоход,
		|	ОстаткиНДФЛКЗачету.СуммаДолгНаНачалоПериодаНДФЛ,
		|	ОстаткиНДФЛКЗачету.СуммаДолгНаКонецПериодаНДФЛ
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиНДФЛКЗачету КАК ОстаткиНДФЛКЗачету
		|		ПО Сотрудники.МесяцНачисления = ОстаткиНДФЛКЗачету.МесяцНачисления
		|			И Сотрудники.ФизическоеЛицо = ОстаткиНДФЛКЗачету.ФизическоеЛицо
		|			И Сотрудники.ГоловнаяОрганизация = ОстаткиНДФЛКЗачету.ГоловнаяОрганизация
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычеты КАК Вычеты
		|		ПО Сотрудники.МесяцНачисления = Вычеты.МесяцНачисления
		|			И Сотрудники.ФизическоеЛицо = Вычеты.ФизическоеЛицо
		|			И Сотрудники.ГоловнаяОрганизация = Вычеты.ГоловнаяОрганизация
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОблагаемыйДоход КАК ОблагаемыйДоходПомесячно
		|		ПО Сотрудники.МесяцНачисления = ОблагаемыйДоходПомесячно.МесяцНачисления
		|			И Сотрудники.ФизическоеЛицо = ОблагаемыйДоходПомесячно.ФизическоеЛицо
		|			И Сотрудники.ГоловнаяОрганизация = ОблагаемыйДоходПомесячно.ГоловнаяОрганизация";
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ВывестиПодразделениеРасчетныйЛисток(СтрокаПодразделения, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ГруппироватьПоИсточникамФинансирования,структураДляПараметровЗапроса = Неопределено,ОбъектыПечати)
	
	Макеты.Группировка.Параметры.НазваниеПараметра = "Подразделение";
	Макеты.Группировка.Параметры.Значение = СтрокаПодразделения["ПодразделениеНаКонецПериода"];
	
	ДокументРезультат.Вывести(Макеты.Группировка);
	
	ДанныеПоНДФЛ  = ДанныеПоНДФЛ(СтрокаПодразделения.Строки, СтрокаПодразделения.МесяцНачисления);
	
	Для Каждого СтрокаСотрудника Из СтрокаПодразделения.Строки Цикл
		ВывестиСотрудникаРасчетныйЛисток(СтрокаСотрудника, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ДанныеПоНДФЛ, ГруппироватьПоИсточникамФинансирования,структураДляПараметровЗапроса,ОбъектыПечати);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиСотрудникаРасчетныйЛисток(СтрокаСотрудника, ДокументРезультатПромежуточный, Макеты, СоответствиеПользовательскихПолей, ДанныеПоНДФЛ, ГруппироватьПоИсточникамФинансирования, структураДляПараметровЗапроса =неопределено, ОбъектыПечати)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	СтруктураНормыВремени = ПолучитьНормуВремени(СтрокаСотрудника.Сотрудник,СтрокаСотрудника.МесяцНачисления);
	
	ЗаполнитьЗначенияСвойств(СтрокаСотрудника,СтруктураНормыВремени);
	
	МассивНачислений = Новый Массив;
	
	Для Каждого Стр из СтрокаСотрудника.Строки Цикл
		
		Если Стр.ОтработаноДней = null Тогда Продолжить КонецЕсли;
		
		Если Стр.ОтработаноДней > 0 Тогда
			ЗаполнитьЗначенияСвойств(Стр,СтруктураНормыВремени);	
		КонецЕсли;	
		
	КонецЦикла;	 
	
	Макеты.Шапка.Параметры.Заполнить(СтрокаСотрудника);
	Макеты.Шапка.Параметры.ПериодПредставление = Формат(СтрокаСотрудника.МесяцНачисления, "ДФ='ММММ гггг'");
	
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка, СтрокаСотрудника, СоответствиеПользовательскихПолей);
	
	//Если Макеты.Шапка.Параметры.КВыплате < 0 Тогда
	//	Макеты.Шапка.Параметры.КВыплате = 0;
	//КонецЕсли;
	
	СтрокаДанныхПоНДФЛ = ДанныеПоНДФЛ.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник");
	Если СтрокаДанныхПоНДФЛ <> Неопределено Тогда
		Макеты.Шапка.Параметры.Заполнить(СтрокаДанныхПоНДФЛ);
	КонецЕсли; 
	
	Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(Макеты.Шапка.Параметры.ПодразделениеНаКонецПериода) Тогда
		Макеты.Шапка.Параметры.ПодразделениеНаКонецПериода = Макеты.Шапка.Параметры.ПодразделениеНаКонецПериода.ПолноеНаименование();
	КонецЕсли; 
	
	ДокументРезультат.Вывести(Макеты.Шапка);
	
	Если ГруппироватьПоИсточникамФинансирования Тогда
		ИтогиПоГруппам = ВывестиГруппировкиПоСтатьямФинансирования(ДокументРезультат, СтрокаСотрудника,  Макеты, СоответствиеПользовательскихПолей);
	Иначе
		ИтогиПоГруппам = ВывестиТелоРасчетногоЛистка(ДокументРезультат, СтрокаСотрудника, Макеты, СоответствиеПользовательскихПолей,МассивНачислений);
	КонецЕсли;
	
	Если СтрокаДанныхПоНДФЛ <> Неопределено Тогда
		Макеты.Сальдо.Параметры.Заполнить(СтрокаДанныхПоНДФЛ);
	КонецЕсли; 
	
	Если ИтогиПоГруппам.СуммаДолгаНаКонецМесяца <> Null И ИтогиПоГруппам.СуммаДолгаНаКонецМесяца >= 0 Тогда
		Макеты.Сальдо.Параметры.ТекстДолгНаКонецПериода = "Долг за предприятием на конец месяца";
		Макеты.Сальдо.Параметры.СуммаДолгНаКонецПериода = ВсегоНач - ВсегоУдерж;
	ИначеЕсли ИтогиПоГруппам.СуммаДолгаНаКонецМесяца <> Null И ИтогиПоГруппам.СуммаДолгаНаКонецМесяца < 0 Тогда
		Макеты.Сальдо.Параметры.ТекстДолгНаКонецПериода = "Долг за работником на конец месяца";
		Макеты.Сальдо.Параметры.СуммаДолгНаКонецПериода = 0;
	Иначе
		Макеты.Сальдо.Параметры.ТекстДолгНаКонецПериода = "Долг за предприятием на конец месяца";
		Макеты.Сальдо.Параметры.СуммаДолгНаКонецПериода = ВсегоНач - ВсегоУдерж;
	КонецЕсли;
	
	Если ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца <> Null И ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца >= 0 Тогда
		Макеты.Сальдо.Параметры.ТекстДолгНаНачалоПериода = "Долг за предприятием на начало месяца";
		Макеты.Сальдо.Параметры.СуммаДолгНаНачалоПериода = 0;
	ИначеЕсли ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца <> Null И ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца < 0 Тогда
		Макеты.Сальдо.Параметры.ТекстДолгНаНачалоПериода = "Долг за работником на начало месяца";
		Макеты.Сальдо.Параметры.СуммаДолгНаНачалоПериода = 0;
	Иначе
		Макеты.Сальдо.Параметры.ТекстДолгНаНачалоПериода = "Долг за предприятием на начало месяца";
		Макеты.Сальдо.Параметры.СуммаДолгНаНачалоПериода = "";
	КонецЕсли;
	
	ДокументРезультат.Вывести(Макеты.Сальдо);
	
	Совпадение = ПроверитьДваМассивНаСовпадениеЭлементовПремий(МассивНачислений,СтрокаСотрудника.Сотрудник);
	
	//ГС Если в видах начислений нет видов относящихся к премиям тогда данный блок выводит не будем
	Если СтруктураДляПараметровЗапроса <> Неопределено И Совпадение Тогда
		
		СписокЗначенийФизЛицо = Новый СписокЗначений;
		СписокЗначенийФизЛицо.Добавить(СтрокаСотрудника.Сотрудник.ФизическоеЛицо);
		СтруктураДляПараметровЗапроса.Вставить("СписокФизЛиц",СписокЗначенийФизЛицо);
		СтруктураДляЗаполнения = ДополнительнаяИнформацияГФ(СтруктураДляПараметровЗапроса);
		
		Если СтруктураДляЗаполнения.ВидРасчета = "Новый" Тогда
			
			Макеты.ГФ_ДопПараметры.Параметры.Показатель = "Прибыль (usd)";
			Макеты.ГФ_ДопПараметры.Параметры.ЗначениеП_М = СтруктураДляЗаполнения.ПрибыльМес;
			Макеты.ГФ_ДопПараметры.Параметры.ЗначениеП_К = СтруктураДляЗаполнения.ПрибыльКв;
			Макеты.ГФ_ДопПараметры.Параметры.Остаток     = СтруктураДляЗаполнения.Остаток;
			Макеты.ГФ_ДопПараметры.Параметры.ВыполнениеПлана     = ?(СтруктураДляЗаполнения.Остаток <= 0,"(План выполнен!)","");
			
			ДокументРезультат.Вывести(Макеты.ГФ_ДопПараметры);
			
		ИначеЕсли СтруктураДляЗаполнения.ВидРасчета = "Старый" Тогда
			
			Макеты.ГФ_ДопПараметры.Параметры.Показатель = "Отгрузки";
			Макеты.ГФ_ДопПараметры.Параметры.ЗначениеП_М = СтруктураДляЗаполнения.ОтгрузкиМес;
			Макеты.ГФ_ДопПараметры.Параметры.ЗначениеП_К = СтруктураДляЗаполнения.ОтгрузкиКв;
			Макеты.ГФ_ДопПараметры.Параметры.Остаток     = СтруктураДляЗаполнения.Остаток;
			Макеты.ГФ_ДопПараметры.Параметры.ВыполнениеПлана     = ?(СтруктураДляЗаполнения.Остаток <= 0,"(План выполнен!)","");
			
			ДокументРезультат.Вывести(Макеты.ГФ_ДопПараметры);
			
		КонецЕсли;	
		
	КонецЕсли; 
	//ГФ

	Представление = Макеты.Шапка.Параметры.СотрудникФизическоеЛицоФИО;
	ОбъектыПечати.Добавить(ДокументРезультат,Представление);
	
	ДокументРезультатПромежуточный.ВывестиГоризонтальныйРазделительСтраниц();
	
	ДокументРезультатПромежуточный.Вывести(ДокументРезультат);
	
КонецПроцедуры

Функция ВывестиГруппировкиПоСтатьямФинансирования(ДокументРезультат, СтрокаСотрудника,  Макеты, СоответствиеПользовательскихПолей)
	
	ИтогиПоГруппам = Новый Структура("СуммаДолгаНаНачалоМесяца,СуммаДолгаНаКонецМесяца", 0, 0);
	
	МассивНачислений = Новый Массив;
	
	Для каждого СтрокаСтатьи Из СтрокаСотрудника.Строки Цикл
		
		Макеты.СтатьяФинансирования.Параметры.Заполнить(СтрокаСтатьи);
		ДокументРезультат.Вывести(Макеты.СтатьяФинансирования);
		
		ИтогиПоСтатье = ВывестиТелоРасчетногоЛистка(ДокументРезультат, СтрокаСтатьи, Макеты, СоответствиеПользовательскихПолей,МассивНачислений);
		
		ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца = ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца + ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца;
		ИтогиПоГруппам.СуммаДолгаНаКонецМесяца = ИтогиПоГруппам.СуммаДолгаНаКонецМесяца + ИтогиПоСтатье.СуммаДолгаНаКонецМесяца;
		
		Если ИтогиПоСтатье.СуммаДолгаНаКонецМесяца <> Null И ИтогиПоСтатье.СуммаДолгаНаКонецМесяца >= 0 Тогда
			Макеты.ИтогСтатьяФинансирования.Параметры.ТекстДолгНаКонецПериода = "Долг за предприятием на конец месяца";
			Макеты.ИтогСтатьяФинансирования.Параметры.СуммаДолгНаКонецПериода = ИтогиПоСтатье.СуммаДолгаНаКонецМесяца;
		ИначеЕсли ИтогиПоСтатье.СуммаДолгаНаКонецМесяца <> Null И ИтогиПоСтатье.СуммаДолгаНаКонецМесяца < 0 Тогда
			Макеты.ИтогСтатьяФинансирования.Параметры.ТекстДолгНаКонецПериода = "Долг за работником на конец месяца";
			Макеты.ИтогСтатьяФинансирования.Параметры.СуммаДолгНаКонецПериода = -ИтогиПоСтатье.СуммаДолгаНаКонецМесяца;
		Иначе
			Макеты.ИтогСтатьяФинансирования.Параметры.ТекстДолгНаКонецПериода = "Долг за предприятием на конец месяца";
			Макеты.ИтогСтатьяФинансирования.Параметры.СуммаДолгНаКонецПериода = "";
		КонецЕсли;
		
		Если ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца <> Null И ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца >= 0 Тогда
			Макеты.ИтогСтатьяФинансирования.Параметры.ТекстДолгНаНачалоПериода = "Долг за предприятием на начало месяца";
			Макеты.ИтогСтатьяФинансирования.Параметры.СуммаДолгНаНачалоПериода = ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца;
		ИначеЕсли ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца <> Null И ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца < 0 Тогда
			Макеты.ИтогСтатьяФинансирования.Параметры.ТекстДолгНаНачалоПериода = "Долг за работником на начало месяца";
			Макеты.ИтогСтатьяФинансирования.Параметры.СуммаДолгНаНачалоПериода = -ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца;
		Иначе
			Макеты.ИтогСтатьяФинансирования.Параметры.ТекстДолгНаНачалоПериода = "Долг за предприятием на начало месяца";
			Макеты.ИтогСтатьяФинансирования.Параметры.СуммаДолгНаНачалоПериода = "";
		КонецЕсли;
		
		ДокументРезультат.Вывести(Макеты.ИтогСтатьяФинансирования);
		
	КонецЦикла;
	
	Макеты.СтатьяФинансирования.Параметры.СтатьяФинансирования =
		НСтр("ru='Итого по всем статьям финансирования'");
	ДокументРезультат.Вывести(Макеты.СтатьяФинансирования);
		
	Возврат ИтогиПоГруппам;
	
КонецФункции

Функция ВывестиТелоРасчетногоЛистка(ДокументРезультат, СтрокаСотрудника, Макеты, СоответствиеПользовательскихПолей,МассивНачислений)
	
	ИтогиПоГруппам = Новый Структура("СуммаДолгаНаНачалоМесяца,СуммаДолгаНаКонецМесяца", 0, 0);
	
	СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено, "Группа");
	Если СтрокаГруппы = Неопределено Тогда
		СтрокиНачислений = Новый Массив;
	Иначе
		СтрокиНачислений = СтрокаГруппы.Строки;
	КонецЕсли;
	
	СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано, "Группа");
	Если СтрокаГруппы = Неопределено Тогда
		СтрокиУдержаний = Новый Массив;
	Иначе
		СтрокиУдержаний = СтрокаГруппы.Строки;
	КонецЕсли;
	
	СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно, "Группа");
	Если СтрокаГруппы = Неопределено Тогда
		СтрокиСправочно = Новый Массив;
	Иначе
		СтрокиСправочно = СтрокаГруппы.Строки;
	КонецЕсли;
	
	СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Выплачено, "Группа");
	Если СтрокаГруппы = Неопределено Тогда
		СтрокиВыплачено = Новый Массив;
	Иначе
		СтрокиВыплачено = СтрокаГруппы.Строки;
	КонецЕсли;
	
	Если СтрокиНачислений.Количество() > 0 ИЛИ СтрокиУдержаний.Количество() > 0 Тогда
		ДокументРезультат.Вывести(Макеты.НачисленоУдержано);
		НомерСтроки = 0;
		Пока НомерСтроки < СтрокиНачислений.Количество() ИЛИ НомерСтроки < СтрокиУдержаний.Количество() Цикл
			
			Для НомерПараметра = 0 По Макеты.СтрокаДвижений.Параметры.Количество() -1 Цикл
				Макеты.СтрокаДвижений.Параметры.Установить(НомерПараметра, "");
			КонецЦикла;
			
			Если НомерСтроки < СтрокиНачислений.Количество() Тогда
				
				СтрокаНачислений = СтрокиНачислений[НомерСтроки];
				
				Макеты.СтрокаДвижений.Параметры.ПериодДействияНачислений = СтрокаНачислений.ПериодДействия;
				
				Если ЗначениеЗаполнено(СтрокаНачислений.ОплаченоДней) И СтрокаНачислений.ОплаченоДней > 0 Тогда
					ОплаченныеДниЧасы = 0;
				ИначеЕсли ЗначениеЗаполнено(СтрокаНачислений.ОплаченоЧасов) И СтрокаНачислений.ОплаченоЧасов > 0 Тогда
					ОплаченныеДниЧасы = 0;
				Иначе
					ОплаченныеДниЧасы = 0;
				КонецЕсли;
				
				Макеты.СтрокаДвижений.Параметры.ОплаченныеДниЧасы = ОплаченныеДниЧасы;
				ЗаполнитьЗначенияСвойств(Макеты.СтрокаДвижений.Параметры, СтрокаНачислений, "ОтработаноДней,ОтработаноЧасов");
				
				Если СтрокаНачислений <> null Тогда
					
					Если СтрокаНачислений.ОтработаноДней > 0 Тогда
						
						ЗаполнитьЗначенияСвойств(Макеты.СтрокаДвижений.Параметры,СтрокаСотрудника,"РабДн, РабЧас");
						
					КонецЕсли;	
					
				КонецЕсли;	
				
				//ГФ Заполним массив начислений данными по начислениям сотрудника в этом документе
				МассивНачислений.Добавить(СтрокаНачислений.ВидРасчета);
				//ГФ
				
				ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(
					Макеты.СтрокаДвижений,
					СтрокаНачислений,
					СоответствиеПользовательскихПолей,
					"Начисление,СуммаНачислено");
				
			КонецЕсли;
			
			Если НомерСтроки < СтрокиУдержаний.Количество() Тогда
				
				СтрокаУдержаний = СтрокиУдержаний[НомерСтроки];
				
				Макеты.СтрокаДвижений.Параметры.ПериодДействияУдержаний = СтрокаУдержаний.ПериодДействия;
				ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(
					Макеты.СтрокаДвижений,
					СтрокаУдержаний,
					СоответствиеПользовательскихПолей,
					"Удержание,СуммаУдержано");
				
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
			ДокументРезультат.Вывести(Макеты.СтрокаДвижений);
			
		КонецЦИкла;
		
		СуммаНачисленоВНатуральнойФорме = 0;
		
		Если ТипЗнч(СтрокиНачислений) = Тип("Массив") Тогда
			Макеты.Итог12.Параметры.СуммаНачисления = 0;
		Иначе
			Макеты.Итог12.Параметры.СуммаНачисления = СтрокиНачислений.Итог(СоответствиеПользовательскихПолей.Получить("СуммаНачислено"));
			СуммаНачисленоВНатуральнойФорме = СтрокиНачислений.Итог(СоответствиеПользовательскихПолей.Получить("СуммаНачисленоВНатуральнойФорме"));
		КонецЕсли;
		
		ВсегоНач = Макеты.Итог12.Параметры.СуммаНачисления;
		
		Если ТипЗнч(СтрокиУдержаний) = Тип("Массив") Тогда
			Макеты.Итог12.Параметры.СуммаУдержания = 0;
		Иначе
			Макеты.Итог12.Параметры.СуммаУдержания = СтрокиУдержаний.Итог(СоответствиеПользовательскихПолей.Получить("СуммаУдержано"));
		КонецЕсли;
		
		ВсегоУдерж = Макеты.Итог12.Параметры.СуммаУдержания;
		
		ДокументРезультат.Вывести(Макеты.Итог12);
		
		Если СуммаНачисленоВНатуральнойФорме <> 0 Тогда
			Макеты.Итог12ВНатуральнойФорме.Параметры.СуммаНачисления = СуммаНачисленоВНатуральнойФорме;
			ДокументРезультат.Вывести(Макеты.Итог12ВНатуральнойФорме);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокиСправочно.Количество() > 0 ИЛИ СтрокиВыплачено.Количество() > 0 Тогда
		
		ДокументРезультат.Вывести(Макеты.ПрочиеВыплачено);
		НомерСтроки = 0;
		Пока НомерСтроки < СтрокиСправочно.Количество() ИЛИ НомерСтроки < СтрокиВыплачено.Количество() Цикл
			
			Для НомерПараметра = 0 По Макеты.СтрокаДвижений.Параметры.Количество() -1 Цикл
				Макеты.СтрокаДвижений.Параметры.Установить(НомерПараметра, "");
			КонецЦикла;
			
			Если НомерСтроки < СтрокиСправочно.Количество() Тогда
				
				СтрокаСправочно = СтрокиСправочно[НомерСтроки];
				
				Макеты.СтрокаДвижений.Параметры.Заполнить(СтрокаСправочно);
				ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(
					Макеты.СтрокаДвижений,
					СтрокаСправочно,
					СоответствиеПользовательскихПолей,
					"Начисление,СуммаНачислено");
				
			КонецЕсли;
			
			Если НомерСтроки < СтрокиВыплачено.Количество() Тогда
				
				СтрокаВыплачено = СтрокиВыплачено[НомерСтроки];
				
				Макеты.СтрокаДвижений.Параметры.Заполнить(СтрокаВыплачено);
				ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(
					Макеты.СтрокаДвижений,
					СтрокаВыплачено,
					СоответствиеПользовательскихПолей,
					"Удержание,СуммаУдержано");
				
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
			ДокументРезультат.Вывести(Макеты.СтрокаДвижений);
			
		КонецЦИкла;
		
		Если ТипЗнч(СтрокиСправочно) = Тип("Массив") Тогда
			Макеты.Итог34.Параметры.СуммаНачисления = 0;
		Иначе
			Макеты.Итог34.Параметры.СуммаНачисления = СтрокиСправочно.Итог(СоответствиеПользовательскихПолей.Получить("СуммаНачислено"));
		КонецЕсли;
				
		Если ТипЗнч(СтрокиВыплачено) = Тип("Массив") Тогда
			Макеты.Итог34.Параметры.СуммаВыплат	 = 0;
		Иначе
			Макеты.Итог34.Параметры.СуммаВыплат	 = СтрокиВыплачено.Итог(СоответствиеПользовательскихПолей.Получить("СуммаУдержано"));
		КонецЕсли;
		
		ДокументРезультат.Вывести(Макеты.Итог34);
		
	КонецЕсли; 

	СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.НачальноеСальдо, "Группа");
	Если СтрокаГруппы = Неопределено Тогда
		ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца = 0;
	Иначе
		ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца = СтрокаГруппы.Сумма;
	КонецЕсли;
	
	СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.КонечноеСальдо, "Группа");
	Если СтрокаГруппы = Неопределено Тогда
		ИтогиПоГруппам.СуммаДолгаНаКонецМесяца = 0;
	Иначе
		ИтогиПоГруппам.СуммаДолгаНаКонецМесяца = СтрокаГруппы.Сумма;
	КонецЕсли;
	
	Возврат ИтогиПоГруппам;
	
КонецФункции

Функция ПолучитьНормуВремени(Сотр, Мес)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ВЫРАЗИТЬ(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма КАК ЧИСЛО(3, 0))) КАК РабЧас,
		|	СУММА(ВЫРАЗИТЬ(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначениеНорма КАК ЧИСЛО(3, 0))) КАК РабДн
		|ИЗ
		|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|ГДЕ
		|	ГрафикиРаботыПоВидамВремени.Месяц = &Мес
		|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &ВидУчетаВремени
		|	И ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &Сотр
		|	И ГрафикиРаботыПоВидамВремени.ВремяВЧасах";
	
	Запрос.УстановитьПараметр("ВидУчетаВремени", Справочники.ВидыИспользованияРабочегоВремени.РабочееВремя);
	Запрос.УстановитьПараметр("Мес", Мес);
	Запрос.УстановитьПараметр("Сотр", Сотр);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи;
	КонецЦикла;
	
КонецФункции	

Функция ПроверитьДваМассивНаСовпадениеЭлементовПремий(МассивНачислений,Сотрудник)
	
	Результат = Ложь;
	
	МассивПремий = ПолучитьМассивПремий();
	
	Для Ит1 = 0 По МассивНачислений.Вграница() Цикл
		
		Если МассивНачислений[Ит1] = ПланыВидовРасчета.Начисления.НайтиПоКоду("ОКЛЧС") И
			Сотрудник = Справочники.Сотрудники.НайтиПоКоду("") Тогда
			Возврат Истина;
		КонецЕсли;	
		
		Для Ит2 = 0 по МассивПремий.ВГраница() Цикл
			Если МассивНачислений[Ит1] = МассивПремий[Ит2] Тогда
				Возврат Истина;
			КонецЕсли;	
		КонецЦикла;			
	КонецЦикла;	
	
	//Если сотрудник Базюк и видначисления оплата по окладу тогда тоже выведем
	
	Возврат Результат;	
КонецФункции	

Функция ПолучитьМассивПремий()
	
	Настройка = Справочники.ГС_ДополнительныеНастройки.СписокВидовНачисленийСТипомПремия;
	
	Массив = Новый Массив;

	Для каждого Стр из Настройка.ДопСвойства Цикл
		Массив.Добавить(Стр.Значение);
	КонецЦикла;	
	
	Возврат Массив;
	
КонецФункции	
#КонецЕсли


//из модуля менеджера
ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(ЭтотОбъект);
УчетНачисленнойЗарплаты.ДополнитьАнализНачисленийИУдержаний(ЭтотОбъект);
